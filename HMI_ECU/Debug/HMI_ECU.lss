
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002884  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  00002884  00002918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008001a8  008001a8  00002a60  2**0
                  ALLOC
  3 .stab         00002904  00000000  00000000  00002a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013a6  00000000  00000000  00005364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000670a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000684a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000069ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008603  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000094ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a29c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a689  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ae57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 07 	call	0xff0	; 0xff0 <main>
      8a:	0c 94 40 14 	jmp	0x2880	; 0x2880 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e9       	ldi	r26, 0x93	; 147
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 e9       	ldi	r24, 0x93	; 147
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Start_Screen>:

/* ********************************************************************************** */
/* ********************************************************************************** */


void Start_Screen(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	LCD_displayStringRowColumn(0,0,"Welcome To Door Lock System...");
     b4e:	20 e6       	ldi	r18, 0x60	; 96
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	a9 01       	movw	r20, r18
     b58:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
	delay_ms(3000);
     b5c:	68 eb       	ldi	r22, 0xB8	; 184
     b5e:	7b e0       	ldi	r23, 0x0B	; 11
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>



}
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <First_Password>:
/* ********************************************************************************** */
/* ********************************************************************************** */


void First_Password(void){
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
	pass_counter=0;
     b76:	10 92 a9 01 	sts	0x01A9, r1
	LCD_displayStringRowColumn(0,0,"Enter New Password:               ");
     b7a:	2f e7       	ldi	r18, 0x7F	; 127
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	a9 01       	movw	r20, r18
     b84:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_moveCursor>

	while(1){


			 key = KEYPAD_getPressedKey();
     b90:	0e 94 22 0c 	call	0x1844	; 0x1844 <KEYPAD_getPressedKey>
     b94:	80 93 b8 01 	sts	0x01B8, r24
			delay_ms(500);
     b98:	64 ef       	ldi	r22, 0xF4	; 244
     b9a:	71 e0       	ldi	r23, 0x01	; 1
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>

			if( (key >= 0) && (key <= 9) ){
     ba4:	80 91 b8 01 	lds	r24, 0x01B8
     ba8:	8a 30       	cpi	r24, 0x0A	; 10
     baa:	90 f4       	brcc	.+36     	; 0xbd0 <First_Password+0x62>


					password1[pass_counter]=key;
     bac:	80 91 a9 01 	lds	r24, 0x01A9
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	20 91 b8 01 	lds	r18, 0x01B8
     bb8:	fc 01       	movw	r30, r24
     bba:	e7 54       	subi	r30, 0x47	; 71
     bbc:	fe 4f       	sbci	r31, 0xFE	; 254
     bbe:	20 83       	st	Z, r18
					LCD_displayCharacter('*');
     bc0:	8a e2       	ldi	r24, 0x2A	; 42
     bc2:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_displayCharacter>
					pass_counter++;
     bc6:	80 91 a9 01 	lds	r24, 0x01A9
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	80 93 a9 01 	sts	0x01A9, r24

				}
			if (pass_counter == PASSWORD_SIZE){
     bd0:	80 91 a9 01 	lds	r24, 0x01A9
     bd4:	85 30       	cpi	r24, 0x05	; 5
     bd6:	e1 f6       	brne	.-72     	; 0xb90 <First_Password+0x22>
				do{
				key = KEYPAD_getPressedKey();
     bd8:	0e 94 22 0c 	call	0x1844	; 0x1844 <KEYPAD_getPressedKey>
     bdc:	80 93 b8 01 	sts	0x01B8, r24
				delay_ms(500);
     be0:	64 ef       	ldi	r22, 0xF4	; 244
     be2:	71 e0       	ldi	r23, 0x01	; 1
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>
				}while(key != '=');
     bec:	80 91 b8 01 	lds	r24, 0x01B8
     bf0:	8d 33       	cpi	r24, 0x3D	; 61
     bf2:	91 f7       	brne	.-28     	; 0xbd8 <First_Password+0x6a>
				Second_Password();
     bf4:	0e 94 ff 05 	call	0xbfe	; 0xbfe <Second_Password>
				break;
			}
		}
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <Second_Password>:
}

/* ********************************************************************************** */
/* ********************************************************************************** */

void Second_Password(){
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     c06:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Re-enter Password:            ");
     c0a:	22 ea       	ldi	r18, 0xA2	; 162
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	a9 01       	movw	r20, r18
     c14:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_moveCursor>
	pass_counter=0;
     c20:	10 92 a9 01 	sts	0x01A9, r1


	while(1){


			 key = KEYPAD_getPressedKey();
     c24:	0e 94 22 0c 	call	0x1844	; 0x1844 <KEYPAD_getPressedKey>
     c28:	80 93 b8 01 	sts	0x01B8, r24
			delay_ms(500);
     c2c:	64 ef       	ldi	r22, 0xF4	; 244
     c2e:	71 e0       	ldi	r23, 0x01	; 1
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>

			if( (key >= 0) && (key <= 9) ){
     c38:	80 91 b8 01 	lds	r24, 0x01B8
     c3c:	8a 30       	cpi	r24, 0x0A	; 10
     c3e:	90 f4       	brcc	.+36     	; 0xc64 <Second_Password+0x66>


					password2[pass_counter]=key;
     c40:	80 91 a9 01 	lds	r24, 0x01A9
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	20 91 b8 01 	lds	r18, 0x01B8
     c4c:	fc 01       	movw	r30, r24
     c4e:	ed 54       	subi	r30, 0x4D	; 77
     c50:	fe 4f       	sbci	r31, 0xFE	; 254
     c52:	20 83       	st	Z, r18
					LCD_displayCharacter('*');
     c54:	8a e2       	ldi	r24, 0x2A	; 42
     c56:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_displayCharacter>
					pass_counter++;
     c5a:	80 91 a9 01 	lds	r24, 0x01A9
     c5e:	8f 5f       	subi	r24, 0xFF	; 255
     c60:	80 93 a9 01 	sts	0x01A9, r24

				}
			if (pass_counter == PASSWORD_SIZE){
     c64:	80 91 a9 01 	lds	r24, 0x01A9
     c68:	85 30       	cpi	r24, 0x05	; 5
     c6a:	e1 f6       	brne	.-72     	; 0xc24 <Second_Password+0x26>
				do{
				key = KEYPAD_getPressedKey();
     c6c:	0e 94 22 0c 	call	0x1844	; 0x1844 <KEYPAD_getPressedKey>
     c70:	80 93 b8 01 	sts	0x01B8, r24
				delay_ms(500);
     c74:	64 ef       	ldi	r22, 0xF4	; 244
     c76:	71 e0       	ldi	r23, 0x01	; 1
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>
				}while(key != '=');
     c80:	80 91 b8 01 	lds	r24, 0x01B8
     c84:	8d 33       	cpi	r24, 0x3D	; 61
     c86:	91 f7       	brne	.-28     	; 0xc6c <Second_Password+0x6e>
				Sending_Password();
     c88:	0e 94 49 06 	call	0xc92	; 0xc92 <Sending_Password>
				break;
			}
		}
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <Sending_Password>:

/* ********************************************************************************** */
/* ********************************************************************************** */


void Sending_Password(){
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	00 d0       	rcall	.+0      	; 0xc98 <Sending_Password+0x6>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62



		/* Send the required string to MC2 through UART */
		for(int i = 0;i<PASSWORD_SIZE;i++){
     c9c:	1a 82       	std	Y+2, r1	; 0x02
     c9e:	19 82       	std	Y+1, r1	; 0x01
     ca0:	15 c0       	rjmp	.+42     	; 0xccc <Sending_Password+0x3a>
			UART_sendByte(password1[i]);
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	9a 81       	ldd	r25, Y+2	; 0x02
     ca6:	fc 01       	movw	r30, r24
     ca8:	e7 54       	subi	r30, 0x47	; 71
     caa:	fe 4f       	sbci	r31, 0xFE	; 254
     cac:	80 81       	ld	r24, Z
     cae:	0e 94 10 13 	call	0x2620	; 0x2620 <UART_sendByte>
			UART_sendByte(password2[i]);
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	fc 01       	movw	r30, r24
     cb8:	ed 54       	subi	r30, 0x4D	; 77
     cba:	fe 4f       	sbci	r31, 0xFE	; 254
     cbc:	80 81       	ld	r24, Z
     cbe:	0e 94 10 13 	call	0x2620	; 0x2620 <UART_sendByte>
void Sending_Password(){



		/* Send the required string to MC2 through UART */
		for(int i = 0;i<PASSWORD_SIZE;i++){
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	9a 83       	std	Y+2, r25	; 0x02
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	85 30       	cpi	r24, 0x05	; 5
     cd2:	91 05       	cpc	r25, r1
     cd4:	34 f3       	brlt	.-52     	; 0xca2 <Sending_Password+0x10>
			UART_sendByte(password2[i]);
		}



}
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	08 95       	ret

00000ce0 <ChangePassword>:

/* **********************************************************************************
 *********************************************************************************** */

void ChangePassword(){
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <ChangePassword+0x6>
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62


	LCD_clearScreen();
     cea:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter Password:             ");
     cee:	21 ec       	ldi	r18, 0xC1	; 193
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	a9 01       	movw	r20, r18
     cf8:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_moveCursor>
	pass_counter=0;
     d04:	10 92 a9 01 	sts	0x01A9, r1


	while(1){

	 key = KEYPAD_getPressedKey();
     d08:	0e 94 22 0c 	call	0x1844	; 0x1844 <KEYPAD_getPressedKey>
     d0c:	80 93 b8 01 	sts	0x01B8, r24
	delay_ms(500);
     d10:	64 ef       	ldi	r22, 0xF4	; 244
     d12:	71 e0       	ldi	r23, 0x01	; 1
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>

	if( (key >= 0) && (key <= 9) ){
     d1c:	80 91 b8 01 	lds	r24, 0x01B8
     d20:	8a 30       	cpi	r24, 0x0A	; 10
     d22:	90 f4       	brcc	.+36     	; 0xd48 <ChangePassword+0x68>


			password1[pass_counter]=key;
     d24:	80 91 a9 01 	lds	r24, 0x01A9
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	20 91 b8 01 	lds	r18, 0x01B8
     d30:	fc 01       	movw	r30, r24
     d32:	e7 54       	subi	r30, 0x47	; 71
     d34:	fe 4f       	sbci	r31, 0xFE	; 254
     d36:	20 83       	st	Z, r18
			LCD_displayCharacter('*');
     d38:	8a e2       	ldi	r24, 0x2A	; 42
     d3a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_displayCharacter>
			pass_counter++;
     d3e:	80 91 a9 01 	lds	r24, 0x01A9
     d42:	8f 5f       	subi	r24, 0xFF	; 255
     d44:	80 93 a9 01 	sts	0x01A9, r24

		}
	if (pass_counter == PASSWORD_SIZE){
     d48:	80 91 a9 01 	lds	r24, 0x01A9
     d4c:	85 30       	cpi	r24, 0x05	; 5
     d4e:	e1 f6       	brne	.-72     	; 0xd08 <ChangePassword+0x28>
		do{
		key = KEYPAD_getPressedKey();
     d50:	0e 94 22 0c 	call	0x1844	; 0x1844 <KEYPAD_getPressedKey>
     d54:	80 93 b8 01 	sts	0x01B8, r24
		delay_ms(500);
     d58:	64 ef       	ldi	r22, 0xF4	; 244
     d5a:	71 e0       	ldi	r23, 0x01	; 1
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>
		}while(key != '=');
     d64:	80 91 b8 01 	lds	r24, 0x01B8
     d68:	8d 33       	cpi	r24, 0x3D	; 61
     d6a:	91 f7       	brne	.-28     	; 0xd50 <ChangePassword+0x70>
		pass_counter = 0;
     d6c:	10 92 a9 01 	sts	0x01A9, r1
		for(int i = 0;i<PASSWORD_SIZE;i++){
     d70:	1a 82       	std	Y+2, r1	; 0x02
     d72:	19 82       	std	Y+1, r1	; 0x01
     d74:	0d c0       	rjmp	.+26     	; 0xd90 <ChangePassword+0xb0>
			UART_sendByte(password1[i]);
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	fc 01       	movw	r30, r24
     d7c:	e7 54       	subi	r30, 0x47	; 71
     d7e:	fe 4f       	sbci	r31, 0xFE	; 254
     d80:	80 81       	ld	r24, Z
     d82:	0e 94 10 13 	call	0x2620	; 0x2620 <UART_sendByte>
		do{
		key = KEYPAD_getPressedKey();
		delay_ms(500);
		}while(key != '=');
		pass_counter = 0;
		for(int i = 0;i<PASSWORD_SIZE;i++){
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	9a 83       	std	Y+2, r25	; 0x02
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	85 30       	cpi	r24, 0x05	; 5
     d96:	91 05       	cpc	r25, r1
     d98:	74 f3       	brlt	.-36     	; 0xd76 <ChangePassword+0x96>
			UART_sendByte(password1[i]);
		}
			if (UART_recieveByte() == RIGHT_PASSWORD ){
     d9a:	0e 94 27 13 	call	0x264e	; 0x264e <UART_recieveByte>
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	a9 f4       	brne	.+42     	; 0xdcc <ChangePassword+0xec>
				LCD_clearScreen();
     da2:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_clearScreen>
				fail_counter=0; //nsfr el fail counter
     da6:	10 92 aa 01 	sts	0x01AA, r1
				LCD_displayStringRowColumn(0,0,"Right Password");
     daa:	2e ed       	ldi	r18, 0xDE	; 222
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	a9 01       	movw	r20, r18
     db4:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
				delay_ms(3000);
     db8:	68 eb       	ldi	r22, 0xB8	; 184
     dba:	7b e0       	ldi	r23, 0x0B	; 11
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>
				start_again=1;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	80 93 ab 01 	sts	0x01AB, r24
     dca:	29 c0       	rjmp	.+82     	; 0xe1e <ChangePassword+0x13e>
				break;

			}else{


				fail_counter++;
     dcc:	80 91 aa 01 	lds	r24, 0x01AA
     dd0:	8f 5f       	subi	r24, 0xFF	; 255
     dd2:	80 93 aa 01 	sts	0x01AA, r24
				if (fail_counter == 3){
     dd6:	80 91 aa 01 	lds	r24, 0x01AA
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	91 f4       	brne	.+36     	; 0xe02 <ChangePassword+0x122>
					LCD_clearScreen();
     dde:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"WARNING, 3 FAIL ATTEMPTS");
     de2:	2d ee       	ldi	r18, 0xED	; 237
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	a9 01       	movw	r20, r18
     dec:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
					delay_ms(60000);
     df0:	60 e6       	ldi	r22, 0x60	; 96
     df2:	7a ee       	ldi	r23, 0xEA	; 234
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>
					fail_counter =0;
     dfc:	10 92 aa 01 	sts	0x01AA, r1
     e00:	0e c0       	rjmp	.+28     	; 0xe1e <ChangePassword+0x13e>
					break;
				}else{
					LCD_clearScreen();
     e02:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Wrong Password, Enter Again");
     e06:	26 e0       	ldi	r18, 0x06	; 6
     e08:	31 e0       	ldi	r19, 0x01	; 1
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	a9 01       	movw	r20, r18
     e10:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
					LCD_moveCursor(1,0);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_moveCursor>
     e1c:	75 cf       	rjmp	.-278    	; 0xd08 <ChangePassword+0x28>
		break;
	}

	}

}
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <OpenTheDoor>:


/* **********************************************************************************
 *********************************************************************************** */

void OpenTheDoor(){
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <OpenTheDoor+0x6>
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
     e32:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter Password:");
     e36:	22 e2       	ldi	r18, 0x22	; 34
     e38:	31 e0       	ldi	r19, 0x01	; 1
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	a9 01       	movw	r20, r18
     e40:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_moveCursor>
	pass_counter=0;
     e4c:	10 92 a9 01 	sts	0x01A9, r1


	while(1){

	 key = KEYPAD_getPressedKey();
     e50:	0e 94 22 0c 	call	0x1844	; 0x1844 <KEYPAD_getPressedKey>
     e54:	80 93 b8 01 	sts	0x01B8, r24
	delay_ms(500);
     e58:	64 ef       	ldi	r22, 0xF4	; 244
     e5a:	71 e0       	ldi	r23, 0x01	; 1
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>

	if( (key >= 0) && (key <= 9) ){
     e64:	80 91 b8 01 	lds	r24, 0x01B8
     e68:	8a 30       	cpi	r24, 0x0A	; 10
     e6a:	90 f4       	brcc	.+36     	; 0xe90 <OpenTheDoor+0x68>


			password1[pass_counter]=key;
     e6c:	80 91 a9 01 	lds	r24, 0x01A9
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	20 91 b8 01 	lds	r18, 0x01B8
     e78:	fc 01       	movw	r30, r24
     e7a:	e7 54       	subi	r30, 0x47	; 71
     e7c:	fe 4f       	sbci	r31, 0xFE	; 254
     e7e:	20 83       	st	Z, r18
			LCD_displayCharacter('*');
     e80:	8a e2       	ldi	r24, 0x2A	; 42
     e82:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_displayCharacter>
			pass_counter++;
     e86:	80 91 a9 01 	lds	r24, 0x01A9
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
     e8c:	80 93 a9 01 	sts	0x01A9, r24

		}
	if (pass_counter == PASSWORD_SIZE){
     e90:	80 91 a9 01 	lds	r24, 0x01A9
     e94:	85 30       	cpi	r24, 0x05	; 5
     e96:	e1 f6       	brne	.-72     	; 0xe50 <OpenTheDoor+0x28>
		do{
		key = KEYPAD_getPressedKey();
     e98:	0e 94 22 0c 	call	0x1844	; 0x1844 <KEYPAD_getPressedKey>
     e9c:	80 93 b8 01 	sts	0x01B8, r24
		delay_ms(500);
     ea0:	64 ef       	ldi	r22, 0xF4	; 244
     ea2:	71 e0       	ldi	r23, 0x01	; 1
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>
		}while(key != '=');
     eac:	80 91 b8 01 	lds	r24, 0x01B8
     eb0:	8d 33       	cpi	r24, 0x3D	; 61
     eb2:	91 f7       	brne	.-28     	; 0xe98 <OpenTheDoor+0x70>
		pass_counter = 0;
     eb4:	10 92 a9 01 	sts	0x01A9, r1
		for(int i = 0;i<PASSWORD_SIZE;i++){
     eb8:	1a 82       	std	Y+2, r1	; 0x02
     eba:	19 82       	std	Y+1, r1	; 0x01
     ebc:	0d c0       	rjmp	.+26     	; 0xed8 <OpenTheDoor+0xb0>
			UART_sendByte(password1[i]);
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	9a 81       	ldd	r25, Y+2	; 0x02
     ec2:	fc 01       	movw	r30, r24
     ec4:	e7 54       	subi	r30, 0x47	; 71
     ec6:	fe 4f       	sbci	r31, 0xFE	; 254
     ec8:	80 81       	ld	r24, Z
     eca:	0e 94 10 13 	call	0x2620	; 0x2620 <UART_sendByte>
		do{
		key = KEYPAD_getPressedKey();
		delay_ms(500);
		}while(key != '=');
		pass_counter = 0;
		for(int i = 0;i<PASSWORD_SIZE;i++){
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	85 30       	cpi	r24, 0x05	; 5
     ede:	91 05       	cpc	r25, r1
     ee0:	74 f3       	brlt	.-36     	; 0xebe <OpenTheDoor+0x96>
			UART_sendByte(password1[i]);
		}
			if (UART_recieveByte() == RIGHT_PASSWORD ){
     ee2:	0e 94 27 13 	call	0x264e	; 0x264e <UART_recieveByte>
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	91 f4       	brne	.+36     	; 0xf0e <OpenTheDoor+0xe6>
				LCD_clearScreen();
     eea:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_clearScreen>
				fail_counter=0; //nsfr el fail counter
     eee:	10 92 aa 01 	sts	0x01AA, r1
				LCD_displayStringRowColumn(0,0,"Door is Unlocking");
     ef2:	22 e3       	ldi	r18, 0x32	; 50
     ef4:	31 e0       	ldi	r19, 0x01	; 1
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	a9 01       	movw	r20, r18
     efc:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
				delay_ms(33000);
     f00:	68 ee       	ldi	r22, 0xE8	; 232
     f02:	70 e8       	ldi	r23, 0x80	; 128
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>
     f0c:	29 c0       	rjmp	.+82     	; 0xf60 <OpenTheDoor+0x138>

			}else{


				fail_counter++;
     f0e:	80 91 aa 01 	lds	r24, 0x01AA
     f12:	8f 5f       	subi	r24, 0xFF	; 255
     f14:	80 93 aa 01 	sts	0x01AA, r24
				if (fail_counter == 3){
     f18:	80 91 aa 01 	lds	r24, 0x01AA
     f1c:	83 30       	cpi	r24, 0x03	; 3
     f1e:	91 f4       	brne	.+36     	; 0xf44 <OpenTheDoor+0x11c>
					LCD_clearScreen();
     f20:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"WARNING, 3 FAIL ATTEMPTS");
     f24:	2d ee       	ldi	r18, 0xED	; 237
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	a9 01       	movw	r20, r18
     f2e:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
					delay_ms(60000);
     f32:	60 e6       	ldi	r22, 0x60	; 96
     f34:	7a ee       	ldi	r23, 0xEA	; 234
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>
					fail_counter=0;
     f3e:	10 92 aa 01 	sts	0x01AA, r1
     f42:	0e c0       	rjmp	.+28     	; 0xf60 <OpenTheDoor+0x138>
					break;
				}else{
					LCD_clearScreen();
     f44:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Wrong Password, Enter Again");
     f48:	26 e0       	ldi	r18, 0x06	; 6
     f4a:	31 e0       	ldi	r19, 0x01	; 1
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	a9 01       	movw	r20, r18
     f52:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
					LCD_moveCursor(1,0);
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_moveCursor>
     f5e:	78 cf       	rjmp	.-272    	; 0xe50 <OpenTheDoor+0x28>

		break;
	}

	}
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <Main_Screen>:


/* **********************************************************************************
 *********************************************************************************** */

void Main_Screen(){
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
     f72:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_clearScreen>
	while(1){
		if(start_again==1){
     f76:	80 91 ab 01 	lds	r24, 0x01AB
     f7a:	81 30       	cpi	r24, 0x01	; 1
     f7c:	29 f4       	brne	.+10     	; 0xf88 <Main_Screen+0x1e>
			start_again=0;
     f7e:	10 92 ab 01 	sts	0x01AB, r1

	}


	}
}
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret
	while(1){
		if(start_again==1){
			start_again=0;
			break;
		}
	LCD_displayStringRowColumn(0,0,"'+':Open The Door         ");
     f88:	24 e4       	ldi	r18, 0x44	; 68
     f8a:	31 e0       	ldi	r19, 0x01	; 1
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	a9 01       	movw	r20, r18
     f92:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"'-':Change Password");
     f96:	2f e5       	ldi	r18, 0x5F	; 95
     f98:	31 e0       	ldi	r19, 0x01	; 1
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	a9 01       	movw	r20, r18
     fa0:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>


	do{
	 key = KEYPAD_getPressedKey();
     fa4:	0e 94 22 0c 	call	0x1844	; 0x1844 <KEYPAD_getPressedKey>
     fa8:	80 93 b8 01 	sts	0x01B8, r24
	delay_ms(500);
     fac:	64 ef       	ldi	r22, 0xF4	; 244
     fae:	71 e0       	ldi	r23, 0x01	; 1
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>
	}while(key != '+' && key != '-');
     fb8:	80 91 b8 01 	lds	r24, 0x01B8
     fbc:	8b 32       	cpi	r24, 0x2B	; 43
     fbe:	21 f0       	breq	.+8      	; 0xfc8 <Main_Screen+0x5e>
     fc0:	80 91 b8 01 	lds	r24, 0x01B8
     fc4:	8d 32       	cpi	r24, 0x2D	; 45
     fc6:	71 f7       	brne	.-36     	; 0xfa4 <Main_Screen+0x3a>


	if(key == '+'){
     fc8:	80 91 b8 01 	lds	r24, 0x01B8
     fcc:	8b 32       	cpi	r24, 0x2B	; 43
     fce:	31 f4       	brne	.+12     	; 0xfdc <Main_Screen+0x72>

		UART_sendByte(OPEN_DOOR);
     fd0:	85 e0       	ldi	r24, 0x05	; 5
     fd2:	0e 94 10 13 	call	0x2620	; 0x2620 <UART_sendByte>
		OpenTheDoor();
     fd6:	0e 94 14 07 	call	0xe28	; 0xe28 <OpenTheDoor>
     fda:	cd cf       	rjmp	.-102    	; 0xf76 <Main_Screen+0xc>
	}
	else if(key == '-'){
     fdc:	80 91 b8 01 	lds	r24, 0x01B8
     fe0:	8d 32       	cpi	r24, 0x2D	; 45
     fe2:	49 f6       	brne	.-110    	; 0xf76 <Main_Screen+0xc>
		UART_sendByte(CHANGE_PASS);
     fe4:	86 e0       	ldi	r24, 0x06	; 6
     fe6:	0e 94 10 13 	call	0x2620	; 0x2620 <UART_sendByte>
		ChangePassword();
     fea:	0e 94 70 06 	call	0xce0	; 0xce0 <ChangePassword>
     fee:	c3 cf       	rjmp	.-122    	; 0xf76 <Main_Screen+0xc>

00000ff0 <main>:
}




int main(void){
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	2c 97       	sbiw	r28, 0x0c	; 12
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61

	SREG=1<<7;
    1004:	ef e5       	ldi	r30, 0x5F	; 95
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 e8       	ldi	r24, 0x80	; 128
    100a:	80 83       	st	Z, r24

	LCD_init();
    100c:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <LCD_init>


	UART_ConfigType uart1={BITS_8,DISABLED,BITS_1,9600};
    1010:	ce 01       	movw	r24, r28
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	99 87       	std	Y+9, r25	; 0x09
    1016:	88 87       	std	Y+8, r24	; 0x08
    1018:	eb e9       	ldi	r30, 0x9B	; 155
    101a:	f1 e0       	ldi	r31, 0x01	; 1
    101c:	fb 87       	std	Y+11, r31	; 0x0b
    101e:	ea 87       	std	Y+10, r30	; 0x0a
    1020:	f7 e0       	ldi	r31, 0x07	; 7
    1022:	fc 87       	std	Y+12, r31	; 0x0c
    1024:	ea 85       	ldd	r30, Y+10	; 0x0a
    1026:	fb 85       	ldd	r31, Y+11	; 0x0b
    1028:	00 80       	ld	r0, Z
    102a:	8a 85       	ldd	r24, Y+10	; 0x0a
    102c:	9b 85       	ldd	r25, Y+11	; 0x0b
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	9b 87       	std	Y+11, r25	; 0x0b
    1032:	8a 87       	std	Y+10, r24	; 0x0a
    1034:	e8 85       	ldd	r30, Y+8	; 0x08
    1036:	f9 85       	ldd	r31, Y+9	; 0x09
    1038:	00 82       	st	Z, r0
    103a:	88 85       	ldd	r24, Y+8	; 0x08
    103c:	99 85       	ldd	r25, Y+9	; 0x09
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	99 87       	std	Y+9, r25	; 0x09
    1042:	88 87       	std	Y+8, r24	; 0x08
    1044:	9c 85       	ldd	r25, Y+12	; 0x0c
    1046:	91 50       	subi	r25, 0x01	; 1
    1048:	9c 87       	std	Y+12, r25	; 0x0c
    104a:	ec 85       	ldd	r30, Y+12	; 0x0c
    104c:	ee 23       	and	r30, r30
    104e:	51 f7       	brne	.-44     	; 0x1024 <main+0x34>
	UART_init(&uart1);
    1050:	ce 01       	movw	r24, r28
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	0e 94 a7 12 	call	0x254e	; 0x254e <UART_init>
	UART_sendByte(MCU1_READY);
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	0e 94 10 13 	call	0x2620	; 0x2620 <UART_sendByte>
	/* Wait until MC2 is ready to receive the string */
	while(UART_recieveByte() != MCU2_READY){}
    105e:	0e 94 27 13 	call	0x264e	; 0x264e <UART_recieveByte>
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	e1 f7       	brne	.-8      	; 0x105e <main+0x6e>


	Start_Screen();
    1066:	0e 94 a3 05 	call	0xb46	; 0xb46 <Start_Screen>


	while(1){


		First_Password();
    106a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <First_Password>

		valid_flag=UART_recieveByte();
    106e:	0e 94 27 13 	call	0x264e	; 0x264e <UART_recieveByte>
    1072:	80 93 a8 01 	sts	0x01A8, r24
		if(valid_flag==RIGHT_PASSWORD){
    1076:	80 91 a8 01 	lds	r24, 0x01A8
    107a:	83 30       	cpi	r24, 0x03	; 3
    107c:	91 f4       	brne	.+36     	; 0x10a2 <main+0xb2>
			LCD_clearScreen();
    107e:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"VALID PASSWORD");
    1082:	23 e7       	ldi	r18, 0x73	; 115
    1084:	31 e0       	ldi	r19, 0x01	; 1
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	a9 01       	movw	r20, r18
    108c:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
			delay_ms(5000);
    1090:	68 e8       	ldi	r22, 0x88	; 136
    1092:	73 e1       	ldi	r23, 0x13	; 19
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>
			Main_Screen();
    109c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <Main_Screen>
    10a0:	e4 cf       	rjmp	.-56     	; 0x106a <main+0x7a>
		}
		else if(valid_flag==WRONG_PASSWORD){
    10a2:	80 91 a8 01 	lds	r24, 0x01A8
    10a6:	84 30       	cpi	r24, 0x04	; 4
    10a8:	01 f7       	brne	.-64     	; 0x106a <main+0x7a>
			LCD_clearScreen();
    10aa:	0e 94 ce 11 	call	0x239c	; 0x239c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"INVALID PASSWORD");
    10ae:	22 e8       	ldi	r18, 0x82	; 130
    10b0:	31 e0       	ldi	r19, 0x01	; 1
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	a9 01       	movw	r20, r18
    10b8:	0e 94 92 11 	call	0x2324	; 0x2324 <LCD_displayStringRowColumn>
			delay_ms(5000);
    10bc:	68 e8       	ldi	r22, 0x88	; 136
    10be:	73 e1       	ldi	r23, 0x13	; 19
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 8a 08 	call	0x1114	; 0x1114 <delay_ms>
    10c8:	d0 cf       	rjmp	.-96     	; 0x106a <main+0x7a>

000010ca <timerTick>:
/***********************************************************************
 *                          Functions Definitions                       *
 ***********************************************************************/

static void timerTick( void )
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	g_secTick++;
    10d2:	80 91 b0 01 	lds	r24, 0x01B0
    10d6:	8f 5f       	subi	r24, 0xFF	; 255
    10d8:	80 93 b0 01 	sts	0x01B0, r24
	if(g_secTick== MS_FACTOR){
    10dc:	80 91 b0 01 	lds	r24, 0x01B0
    10e0:	88 30       	cpi	r24, 0x08	; 8
    10e2:	a9 f4       	brne	.+42     	; 0x110e <timerTick+0x44>
		g_timerTick++;
    10e4:	80 91 ac 01 	lds	r24, 0x01AC
    10e8:	90 91 ad 01 	lds	r25, 0x01AD
    10ec:	a0 91 ae 01 	lds	r26, 0x01AE
    10f0:	b0 91 af 01 	lds	r27, 0x01AF
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	a1 1d       	adc	r26, r1
    10f8:	b1 1d       	adc	r27, r1
    10fa:	80 93 ac 01 	sts	0x01AC, r24
    10fe:	90 93 ad 01 	sts	0x01AD, r25
    1102:	a0 93 ae 01 	sts	0x01AE, r26
    1106:	b0 93 af 01 	sts	0x01AF, r27
		g_secTick=0;
    110a:	10 92 b0 01 	sts	0x01B0, r1
	}


}
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <delay_ms>:



void delay_ms( uint32 ms )
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	2e 97       	sbiw	r28, 0x0e	; 14
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	6e 83       	std	Y+6, r22	; 0x06
    112a:	7f 83       	std	Y+7, r23	; 0x07
    112c:	88 87       	std	Y+8, r24	; 0x08
    112e:	99 87       	std	Y+9, r25	; 0x09
	g_timerTick = 0;
    1130:	10 92 ac 01 	sts	0x01AC, r1
    1134:	10 92 ad 01 	sts	0x01AD, r1
    1138:	10 92 ae 01 	sts	0x01AE, r1
    113c:	10 92 af 01 	sts	0x01AF, r1


	Timer_ConfigType config = {DISABLE,CTC,0,250,FCPU_8};
    1140:	ce 01       	movw	r24, r28
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	9b 87       	std	Y+11, r25	; 0x0b
    1146:	8a 87       	std	Y+10, r24	; 0x0a
    1148:	e2 ea       	ldi	r30, 0xA2	; 162
    114a:	f1 e0       	ldi	r31, 0x01	; 1
    114c:	fd 87       	std	Y+13, r31	; 0x0d
    114e:	ec 87       	std	Y+12, r30	; 0x0c
    1150:	f5 e0       	ldi	r31, 0x05	; 5
    1152:	fe 87       	std	Y+14, r31	; 0x0e
    1154:	ec 85       	ldd	r30, Y+12	; 0x0c
    1156:	fd 85       	ldd	r31, Y+13	; 0x0d
    1158:	00 80       	ld	r0, Z
    115a:	8c 85       	ldd	r24, Y+12	; 0x0c
    115c:	9d 85       	ldd	r25, Y+13	; 0x0d
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	9d 87       	std	Y+13, r25	; 0x0d
    1162:	8c 87       	std	Y+12, r24	; 0x0c
    1164:	ea 85       	ldd	r30, Y+10	; 0x0a
    1166:	fb 85       	ldd	r31, Y+11	; 0x0b
    1168:	00 82       	st	Z, r0
    116a:	8a 85       	ldd	r24, Y+10	; 0x0a
    116c:	9b 85       	ldd	r25, Y+11	; 0x0b
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	9b 87       	std	Y+11, r25	; 0x0b
    1172:	8a 87       	std	Y+10, r24	; 0x0a
    1174:	9e 85       	ldd	r25, Y+14	; 0x0e
    1176:	91 50       	subi	r25, 0x01	; 1
    1178:	9e 87       	std	Y+14, r25	; 0x0e
    117a:	ee 85       	ldd	r30, Y+14	; 0x0e
    117c:	ee 23       	and	r30, r30
    117e:	51 f7       	brne	.-44     	; 0x1154 <delay_ms+0x40>
	TIMER_Init(&config);
    1180:	ce 01       	movw	r24, r28
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	0e 94 3e 12 	call	0x247c	; 0x247c <TIMER_Init>
	TIMER_setCallBack(timerTick);
    1188:	85 e6       	ldi	r24, 0x65	; 101
    118a:	98 e0       	ldi	r25, 0x08	; 8
    118c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <TIMER_setCallBack>
	/* Busy wait for n ms. */
	while( g_timerTick< ms );
    1190:	20 91 ac 01 	lds	r18, 0x01AC
    1194:	30 91 ad 01 	lds	r19, 0x01AD
    1198:	40 91 ae 01 	lds	r20, 0x01AE
    119c:	50 91 af 01 	lds	r21, 0x01AF
    11a0:	8e 81       	ldd	r24, Y+6	; 0x06
    11a2:	9f 81       	ldd	r25, Y+7	; 0x07
    11a4:	a8 85       	ldd	r26, Y+8	; 0x08
    11a6:	b9 85       	ldd	r27, Y+9	; 0x09
    11a8:	28 17       	cp	r18, r24
    11aa:	39 07       	cpc	r19, r25
    11ac:	4a 07       	cpc	r20, r26
    11ae:	5b 07       	cpc	r21, r27
    11b0:	78 f3       	brcs	.-34     	; 0x1190 <delay_ms+0x7c>
	TIMER_DeInit();
    11b2:	0e 94 90 12 	call	0x2520	; 0x2520 <TIMER_DeInit>
}
    11b6:	2e 96       	adiw	r28, 0x0e	; 14
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <GPIO_setupPinDirection+0x6>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <GPIO_setupPinDirection+0x8>
    11d0:	0f 92       	push	r0
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	6a 83       	std	Y+2, r22	; 0x02
    11da:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	88 30       	cpi	r24, 0x08	; 8
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <GPIO_setupPinDirection+0x1c>
    11e2:	d5 c0       	rjmp	.+426    	; 0x138e <GPIO_setupPinDirection+0x1c6>
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	84 30       	cpi	r24, 0x04	; 4
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <GPIO_setupPinDirection+0x24>
    11ea:	d1 c0       	rjmp	.+418    	; 0x138e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3d 83       	std	Y+5, r19	; 0x05
    11f4:	2c 83       	std	Y+4, r18	; 0x04
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	9d 81       	ldd	r25, Y+5	; 0x05
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	91 05       	cpc	r25, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <GPIO_setupPinDirection+0x3a>
    1200:	43 c0       	rjmp	.+134    	; 0x1288 <GPIO_setupPinDirection+0xc0>
    1202:	2c 81       	ldd	r18, Y+4	; 0x04
    1204:	3d 81       	ldd	r19, Y+5	; 0x05
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	2c f4       	brge	.+10     	; 0x1216 <GPIO_setupPinDirection+0x4e>
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	9d 81       	ldd	r25, Y+5	; 0x05
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	71 f0       	breq	.+28     	; 0x1230 <GPIO_setupPinDirection+0x68>
    1214:	bc c0       	rjmp	.+376    	; 0x138e <GPIO_setupPinDirection+0x1c6>
    1216:	2c 81       	ldd	r18, Y+4	; 0x04
    1218:	3d 81       	ldd	r19, Y+5	; 0x05
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	09 f4       	brne	.+2      	; 0x1222 <GPIO_setupPinDirection+0x5a>
    1220:	5f c0       	rjmp	.+190    	; 0x12e0 <GPIO_setupPinDirection+0x118>
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	83 30       	cpi	r24, 0x03	; 3
    1228:	91 05       	cpc	r25, r1
    122a:	09 f4       	brne	.+2      	; 0x122e <GPIO_setupPinDirection+0x66>
    122c:	85 c0       	rjmp	.+266    	; 0x1338 <GPIO_setupPinDirection+0x170>
    122e:	af c0       	rjmp	.+350    	; 0x138e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	a1 f4       	brne	.+40     	; 0x125e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1236:	aa e3       	ldi	r26, 0x3A	; 58
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	ea e3       	ldi	r30, 0x3A	; 58
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <GPIO_setupPinDirection+0x8c>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <GPIO_setupPinDirection+0x88>
    1258:	84 2b       	or	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	98 c0       	rjmp	.+304    	; 0x138e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    125e:	aa e3       	ldi	r26, 0x3A	; 58
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ea e3       	ldi	r30, 0x3A	; 58
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <GPIO_setupPinDirection+0xb4>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <GPIO_setupPinDirection+0xb0>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	83 c0       	rjmp	.+262    	; 0x138e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	a1 f4       	brne	.+40     	; 0x12b6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    128e:	a7 e3       	ldi	r26, 0x37	; 55
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e7 e3       	ldi	r30, 0x37	; 55
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 2e       	mov	r0, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <GPIO_setupPinDirection+0xe4>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <GPIO_setupPinDirection+0xe0>
    12b0:	84 2b       	or	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	6c c0       	rjmp	.+216    	; 0x138e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12b6:	a7 e3       	ldi	r26, 0x37	; 55
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e7 e3       	ldi	r30, 0x37	; 55
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <GPIO_setupPinDirection+0x10c>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <GPIO_setupPinDirection+0x108>
    12d8:	80 95       	com	r24
    12da:	84 23       	and	r24, r20
    12dc:	8c 93       	st	X, r24
    12de:	57 c0       	rjmp	.+174    	; 0x138e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	a1 f4       	brne	.+40     	; 0x130e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    12e6:	a4 e3       	ldi	r26, 0x34	; 52
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e4 e3       	ldi	r30, 0x34	; 52
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <GPIO_setupPinDirection+0x13c>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <GPIO_setupPinDirection+0x138>
    1308:	84 2b       	or	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	40 c0       	rjmp	.+128    	; 0x138e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    130e:	a4 e3       	ldi	r26, 0x34	; 52
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e4 e3       	ldi	r30, 0x34	; 52
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <GPIO_setupPinDirection+0x164>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <GPIO_setupPinDirection+0x160>
    1330:	80 95       	com	r24
    1332:	84 23       	and	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	2b c0       	rjmp	.+86     	; 0x138e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	a1 f4       	brne	.+40     	; 0x1366 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    133e:	a1 e3       	ldi	r26, 0x31	; 49
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e1 e3       	ldi	r30, 0x31	; 49
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <GPIO_setupPinDirection+0x194>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <GPIO_setupPinDirection+0x190>
    1360:	84 2b       	or	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	14 c0       	rjmp	.+40     	; 0x138e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1366:	a1 e3       	ldi	r26, 0x31	; 49
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e1 e3       	ldi	r30, 0x31	; 49
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <GPIO_setupPinDirection+0x1bc>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <GPIO_setupPinDirection+0x1b8>
    1388:	80 95       	com	r24
    138a:	84 23       	and	r24, r20
    138c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <GPIO_writePin+0x6>
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <GPIO_writePin+0x8>
    13a6:	0f 92       	push	r0
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	6a 83       	std	Y+2, r22	; 0x02
    13b0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	88 30       	cpi	r24, 0x08	; 8
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <GPIO_writePin+0x1c>
    13b8:	d5 c0       	rjmp	.+426    	; 0x1564 <GPIO_writePin+0x1c6>
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	84 30       	cpi	r24, 0x04	; 4
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <GPIO_writePin+0x24>
    13c0:	d1 c0       	rjmp	.+418    	; 0x1564 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3d 83       	std	Y+5, r19	; 0x05
    13ca:	2c 83       	std	Y+4, r18	; 0x04
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	9d 81       	ldd	r25, Y+5	; 0x05
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	91 05       	cpc	r25, r1
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <GPIO_writePin+0x3a>
    13d6:	43 c0       	rjmp	.+134    	; 0x145e <GPIO_writePin+0xc0>
    13d8:	2c 81       	ldd	r18, Y+4	; 0x04
    13da:	3d 81       	ldd	r19, Y+5	; 0x05
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	2c f4       	brge	.+10     	; 0x13ec <GPIO_writePin+0x4e>
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	71 f0       	breq	.+28     	; 0x1406 <GPIO_writePin+0x68>
    13ea:	bc c0       	rjmp	.+376    	; 0x1564 <GPIO_writePin+0x1c6>
    13ec:	2c 81       	ldd	r18, Y+4	; 0x04
    13ee:	3d 81       	ldd	r19, Y+5	; 0x05
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <GPIO_writePin+0x5a>
    13f6:	5f c0       	rjmp	.+190    	; 0x14b6 <GPIO_writePin+0x118>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	91 05       	cpc	r25, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <GPIO_writePin+0x66>
    1402:	85 c0       	rjmp	.+266    	; 0x150e <GPIO_writePin+0x170>
    1404:	af c0       	rjmp	.+350    	; 0x1564 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	a1 f4       	brne	.+40     	; 0x1434 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    140c:	ab e3       	ldi	r26, 0x3B	; 59
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	eb e3       	ldi	r30, 0x3B	; 59
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_writePin+0x8c>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_writePin+0x88>
    142e:	84 2b       	or	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	98 c0       	rjmp	.+304    	; 0x1564 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1434:	ab e3       	ldi	r26, 0x3B	; 59
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	eb e3       	ldi	r30, 0x3B	; 59
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <GPIO_writePin+0xb4>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <GPIO_writePin+0xb0>
    1456:	80 95       	com	r24
    1458:	84 23       	and	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	83 c0       	rjmp	.+262    	; 0x1564 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	a1 f4       	brne	.+40     	; 0x148c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1464:	a8 e3       	ldi	r26, 0x38	; 56
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <GPIO_writePin+0xe4>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <GPIO_writePin+0xe0>
    1486:	84 2b       	or	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	6c c0       	rjmp	.+216    	; 0x1564 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    148c:	a8 e3       	ldi	r26, 0x38	; 56
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e8 e3       	ldi	r30, 0x38	; 56
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <GPIO_writePin+0x10c>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <GPIO_writePin+0x108>
    14ae:	80 95       	com	r24
    14b0:	84 23       	and	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	57 c0       	rjmp	.+174    	; 0x1564 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	a1 f4       	brne	.+40     	; 0x14e4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    14bc:	a5 e3       	ldi	r26, 0x35	; 53
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e5 e3       	ldi	r30, 0x35	; 53
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <GPIO_writePin+0x13c>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <GPIO_writePin+0x138>
    14de:	84 2b       	or	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	40 c0       	rjmp	.+128    	; 0x1564 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    14e4:	a5 e3       	ldi	r26, 0x35	; 53
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e3       	ldi	r30, 0x35	; 53
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <GPIO_writePin+0x164>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <GPIO_writePin+0x160>
    1506:	80 95       	com	r24
    1508:	84 23       	and	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	2b c0       	rjmp	.+86     	; 0x1564 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	a1 f4       	brne	.+40     	; 0x153c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1514:	a2 e3       	ldi	r26, 0x32	; 50
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e2 e3       	ldi	r30, 0x32	; 50
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <GPIO_writePin+0x194>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <GPIO_writePin+0x190>
    1536:	84 2b       	or	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	14 c0       	rjmp	.+40     	; 0x1564 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    153c:	a2 e3       	ldi	r26, 0x32	; 50
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e2 e3       	ldi	r30, 0x32	; 50
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <GPIO_writePin+0x1bc>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <GPIO_writePin+0x1b8>
    155e:	80 95       	com	r24
    1560:	84 23       	and	r24, r20
    1562:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <GPIO_readPin+0x6>
    157a:	00 d0       	rcall	.+0      	; 0x157c <GPIO_readPin+0x8>
    157c:	0f 92       	push	r0
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	8a 83       	std	Y+2, r24	; 0x02
    1584:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1586:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	88 30       	cpi	r24, 0x08	; 8
    158c:	08 f0       	brcs	.+2      	; 0x1590 <GPIO_readPin+0x1c>
    158e:	84 c0       	rjmp	.+264    	; 0x1698 <GPIO_readPin+0x124>
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	84 30       	cpi	r24, 0x04	; 4
    1594:	08 f0       	brcs	.+2      	; 0x1598 <GPIO_readPin+0x24>
    1596:	80 c0       	rjmp	.+256    	; 0x1698 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	3d 83       	std	Y+5, r19	; 0x05
    15a0:	2c 83       	std	Y+4, r18	; 0x04
    15a2:	4c 81       	ldd	r20, Y+4	; 0x04
    15a4:	5d 81       	ldd	r21, Y+5	; 0x05
    15a6:	41 30       	cpi	r20, 0x01	; 1
    15a8:	51 05       	cpc	r21, r1
    15aa:	79 f1       	breq	.+94     	; 0x160a <GPIO_readPin+0x96>
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	9d 81       	ldd	r25, Y+5	; 0x05
    15b0:	82 30       	cpi	r24, 0x02	; 2
    15b2:	91 05       	cpc	r25, r1
    15b4:	34 f4       	brge	.+12     	; 0x15c2 <GPIO_readPin+0x4e>
    15b6:	2c 81       	ldd	r18, Y+4	; 0x04
    15b8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ba:	21 15       	cp	r18, r1
    15bc:	31 05       	cpc	r19, r1
    15be:	69 f0       	breq	.+26     	; 0x15da <GPIO_readPin+0x66>
    15c0:	6b c0       	rjmp	.+214    	; 0x1698 <GPIO_readPin+0x124>
    15c2:	4c 81       	ldd	r20, Y+4	; 0x04
    15c4:	5d 81       	ldd	r21, Y+5	; 0x05
    15c6:	42 30       	cpi	r20, 0x02	; 2
    15c8:	51 05       	cpc	r21, r1
    15ca:	b9 f1       	breq	.+110    	; 0x163a <GPIO_readPin+0xc6>
    15cc:	8c 81       	ldd	r24, Y+4	; 0x04
    15ce:	9d 81       	ldd	r25, Y+5	; 0x05
    15d0:	83 30       	cpi	r24, 0x03	; 3
    15d2:	91 05       	cpc	r25, r1
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <GPIO_readPin+0x64>
    15d6:	49 c0       	rjmp	.+146    	; 0x166a <GPIO_readPin+0xf6>
    15d8:	5f c0       	rjmp	.+190    	; 0x1698 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    15da:	e9 e3       	ldi	r30, 0x39	; 57
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a9 01       	movw	r20, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <GPIO_readPin+0x7e>
    15ee:	55 95       	asr	r21
    15f0:	47 95       	ror	r20
    15f2:	8a 95       	dec	r24
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <GPIO_readPin+0x7a>
    15f6:	ca 01       	movw	r24, r20
    15f8:	81 70       	andi	r24, 0x01	; 1
    15fa:	90 70       	andi	r25, 0x00	; 0
    15fc:	88 23       	and	r24, r24
    15fe:	19 f0       	breq	.+6      	; 0x1606 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	49 c0       	rjmp	.+146    	; 0x1698 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1606:	19 82       	std	Y+1, r1	; 0x01
    1608:	47 c0       	rjmp	.+142    	; 0x1698 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    160a:	e6 e3       	ldi	r30, 0x36	; 54
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a9 01       	movw	r20, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <GPIO_readPin+0xae>
    161e:	55 95       	asr	r21
    1620:	47 95       	ror	r20
    1622:	8a 95       	dec	r24
    1624:	e2 f7       	brpl	.-8      	; 0x161e <GPIO_readPin+0xaa>
    1626:	ca 01       	movw	r24, r20
    1628:	81 70       	andi	r24, 0x01	; 1
    162a:	90 70       	andi	r25, 0x00	; 0
    162c:	88 23       	and	r24, r24
    162e:	19 f0       	breq	.+6      	; 0x1636 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	31 c0       	rjmp	.+98     	; 0x1698 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1636:	19 82       	std	Y+1, r1	; 0x01
    1638:	2f c0       	rjmp	.+94     	; 0x1698 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    163a:	e3 e3       	ldi	r30, 0x33	; 51
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a9 01       	movw	r20, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <GPIO_readPin+0xde>
    164e:	55 95       	asr	r21
    1650:	47 95       	ror	r20
    1652:	8a 95       	dec	r24
    1654:	e2 f7       	brpl	.-8      	; 0x164e <GPIO_readPin+0xda>
    1656:	ca 01       	movw	r24, r20
    1658:	81 70       	andi	r24, 0x01	; 1
    165a:	90 70       	andi	r25, 0x00	; 0
    165c:	88 23       	and	r24, r24
    165e:	19 f0       	breq	.+6      	; 0x1666 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	19 c0       	rjmp	.+50     	; 0x1698 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1666:	19 82       	std	Y+1, r1	; 0x01
    1668:	17 c0       	rjmp	.+46     	; 0x1698 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    166a:	e0 e3       	ldi	r30, 0x30	; 48
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a9 01       	movw	r20, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <GPIO_readPin+0x10e>
    167e:	55 95       	asr	r21
    1680:	47 95       	ror	r20
    1682:	8a 95       	dec	r24
    1684:	e2 f7       	brpl	.-8      	; 0x167e <GPIO_readPin+0x10a>
    1686:	ca 01       	movw	r24, r20
    1688:	81 70       	andi	r24, 0x01	; 1
    168a:	90 70       	andi	r25, 0x00	; 0
    168c:	88 23       	and	r24, r24
    168e:	19 f0       	breq	.+6      	; 0x1696 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1696:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1698:	89 81       	ldd	r24, Y+1	; 0x01
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <GPIO_setupPortDirection+0x6>
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <GPIO_setupPortDirection+0x8>
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	84 30       	cpi	r24, 0x04	; 4
    16be:	90 f5       	brcc	.+100    	; 0x1724 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	3c 83       	std	Y+4, r19	; 0x04
    16c8:	2b 83       	std	Y+3, r18	; 0x03
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	91 05       	cpc	r25, r1
    16d2:	d1 f0       	breq	.+52     	; 0x1708 <GPIO_setupPortDirection+0x5e>
    16d4:	2b 81       	ldd	r18, Y+3	; 0x03
    16d6:	3c 81       	ldd	r19, Y+4	; 0x04
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <GPIO_setupPortDirection+0x3e>
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	61 f0       	breq	.+24     	; 0x16fe <GPIO_setupPortDirection+0x54>
    16e6:	1e c0       	rjmp	.+60     	; 0x1724 <GPIO_setupPortDirection+0x7a>
    16e8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ea:	3c 81       	ldd	r19, Y+4	; 0x04
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	81 f0       	breq	.+32     	; 0x1712 <GPIO_setupPortDirection+0x68>
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	83 30       	cpi	r24, 0x03	; 3
    16f8:	91 05       	cpc	r25, r1
    16fa:	81 f0       	breq	.+32     	; 0x171c <GPIO_setupPortDirection+0x72>
    16fc:	13 c0       	rjmp	.+38     	; 0x1724 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16fe:	ea e3       	ldi	r30, 0x3A	; 58
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	80 83       	st	Z, r24
    1706:	0e c0       	rjmp	.+28     	; 0x1724 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1708:	e7 e3       	ldi	r30, 0x37	; 55
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	80 83       	st	Z, r24
    1710:	09 c0       	rjmp	.+18     	; 0x1724 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1712:	e4 e3       	ldi	r30, 0x34	; 52
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	80 83       	st	Z, r24
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    171c:	e1 e3       	ldi	r30, 0x31	; 49
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	80 83       	st	Z, r24
			break;
		}
	}
}
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	00 d0       	rcall	.+0      	; 0x1738 <GPIO_writePort+0x6>
    1738:	00 d0       	rcall	.+0      	; 0x173a <GPIO_writePort+0x8>
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	90 f5       	brcc	.+100    	; 0x17ac <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3c 83       	std	Y+4, r19	; 0x04
    1750:	2b 83       	std	Y+3, r18	; 0x03
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	9c 81       	ldd	r25, Y+4	; 0x04
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	91 05       	cpc	r25, r1
    175a:	d1 f0       	breq	.+52     	; 0x1790 <GPIO_writePort+0x5e>
    175c:	2b 81       	ldd	r18, Y+3	; 0x03
    175e:	3c 81       	ldd	r19, Y+4	; 0x04
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	2c f4       	brge	.+10     	; 0x1770 <GPIO_writePort+0x3e>
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	61 f0       	breq	.+24     	; 0x1786 <GPIO_writePort+0x54>
    176e:	1e c0       	rjmp	.+60     	; 0x17ac <GPIO_writePort+0x7a>
    1770:	2b 81       	ldd	r18, Y+3	; 0x03
    1772:	3c 81       	ldd	r19, Y+4	; 0x04
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	81 f0       	breq	.+32     	; 0x179a <GPIO_writePort+0x68>
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	9c 81       	ldd	r25, Y+4	; 0x04
    177e:	83 30       	cpi	r24, 0x03	; 3
    1780:	91 05       	cpc	r25, r1
    1782:	81 f0       	breq	.+32     	; 0x17a4 <GPIO_writePort+0x72>
    1784:	13 c0       	rjmp	.+38     	; 0x17ac <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1786:	eb e3       	ldi	r30, 0x3B	; 59
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	80 83       	st	Z, r24
    178e:	0e c0       	rjmp	.+28     	; 0x17ac <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1790:	e8 e3       	ldi	r30, 0x38	; 56
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	80 83       	st	Z, r24
    1798:	09 c0       	rjmp	.+18     	; 0x17ac <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    179a:	e5 e3       	ldi	r30, 0x35	; 53
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	80 83       	st	Z, r24
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    17a4:	e2 e3       	ldi	r30, 0x32	; 50
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	80 83       	st	Z, r24
			break;
		}
	}
}
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <GPIO_readPort+0x6>
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <GPIO_readPort+0x8>
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    17c8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	84 30       	cpi	r24, 0x04	; 4
    17ce:	90 f5       	brcc	.+100    	; 0x1834 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	3c 83       	std	Y+4, r19	; 0x04
    17d8:	2b 83       	std	Y+3, r18	; 0x03
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	91 05       	cpc	r25, r1
    17e2:	d1 f0       	breq	.+52     	; 0x1818 <GPIO_readPort+0x5e>
    17e4:	2b 81       	ldd	r18, Y+3	; 0x03
    17e6:	3c 81       	ldd	r19, Y+4	; 0x04
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	31 05       	cpc	r19, r1
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <GPIO_readPort+0x3e>
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	61 f0       	breq	.+24     	; 0x180e <GPIO_readPort+0x54>
    17f6:	1e c0       	rjmp	.+60     	; 0x1834 <GPIO_readPort+0x7a>
    17f8:	2b 81       	ldd	r18, Y+3	; 0x03
    17fa:	3c 81       	ldd	r19, Y+4	; 0x04
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	81 f0       	breq	.+32     	; 0x1822 <GPIO_readPort+0x68>
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	9c 81       	ldd	r25, Y+4	; 0x04
    1806:	83 30       	cpi	r24, 0x03	; 3
    1808:	91 05       	cpc	r25, r1
    180a:	81 f0       	breq	.+32     	; 0x182c <GPIO_readPort+0x72>
    180c:	13 c0       	rjmp	.+38     	; 0x1834 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    180e:	e9 e3       	ldi	r30, 0x39	; 57
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	0e c0       	rjmp	.+28     	; 0x1834 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1818:	e6 e3       	ldi	r30, 0x36	; 54
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	09 c0       	rjmp	.+18     	; 0x1834 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1822:	e3 e3       	ldi	r30, 0x33	; 51
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    182c:	e0 e3       	ldi	r30, 0x30	; 48
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1834:	89 81       	ldd	r24, Y+1	; 0x01
}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <KEYPAD_getPressedKey+0x6>
    184a:	0f 92       	push	r0
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1850:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1852:	1b 82       	std	Y+3, r1	; 0x03
    1854:	43 c0       	rjmp	.+134    	; 0x18dc <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1856:	82 e0       	ldi	r24, 0x02	; 2
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	98 2f       	mov	r25, r24
    1862:	9c 5f       	subi	r25, 0xFC	; 252
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	69 2f       	mov	r22, r25
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	88 2f       	mov	r24, r24
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9c 01       	movw	r18, r24
    1876:	2c 5f       	subi	r18, 0xFC	; 252
    1878:	3f 4f       	sbci	r19, 0xFF	; 255
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <KEYPAD_getPressedKey+0x40>
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	2a 95       	dec	r18
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <KEYPAD_getPressedKey+0x3c>
    1888:	80 95       	com	r24
    188a:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	69 81       	ldd	r22, Y+1	; 0x01
    1890:	0e 94 99 0b 	call	0x1732	; 0x1732 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1894:	1a 82       	std	Y+2, r1	; 0x02
    1896:	1c c0       	rjmp	.+56     	; 0x18d0 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1898:	82 e0       	ldi	r24, 0x02	; 2
    189a:	6a 81       	ldd	r22, Y+2	; 0x02
    189c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_readPin>
    18a0:	88 23       	and	r24, r24
    18a2:	99 f4       	brne	.+38     	; 0x18ca <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	88 2f       	mov	r24, r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	98 2f       	mov	r25, r24
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	89 0f       	add	r24, r25
    18b8:	8f 5f       	subi	r24, 0xFF	; 255
    18ba:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	8f 5f       	subi	r24, 0xFF	; 255
    18ce:	8a 83       	std	Y+2, r24	; 0x02
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	84 30       	cpi	r24, 0x04	; 4
    18d4:	08 f3       	brcs	.-62     	; 0x1898 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	8b 83       	std	Y+3, r24	; 0x03
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	84 30       	cpi	r24, 0x04	; 4
    18e0:	08 f4       	brcc	.+2      	; 0x18e4 <KEYPAD_getPressedKey+0xa0>
    18e2:	b9 cf       	rjmp	.-142    	; 0x1856 <KEYPAD_getPressedKey+0x12>
    18e4:	b6 cf       	rjmp	.-148    	; 0x1852 <KEYPAD_getPressedKey+0xe>

000018e6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <KEYPAD_4x4_adjustKeyNumber+0x6>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <KEYPAD_4x4_adjustKeyNumber+0x8>
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    18f4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	3c 83       	std	Y+4, r19	; 0x04
    18fe:	2b 83       	std	Y+3, r18	; 0x03
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	9c 81       	ldd	r25, Y+4	; 0x04
    1904:	88 30       	cpi	r24, 0x08	; 8
    1906:	91 05       	cpc	r25, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <KEYPAD_4x4_adjustKeyNumber+0x26>
    190a:	70 c0       	rjmp	.+224    	; 0x19ec <KEYPAD_4x4_adjustKeyNumber+0x106>
    190c:	2b 81       	ldd	r18, Y+3	; 0x03
    190e:	3c 81       	ldd	r19, Y+4	; 0x04
    1910:	29 30       	cpi	r18, 0x09	; 9
    1912:	31 05       	cpc	r19, r1
    1914:	5c f5       	brge	.+86     	; 0x196c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	84 30       	cpi	r24, 0x04	; 4
    191c:	91 05       	cpc	r25, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1920:	59 c0       	rjmp	.+178    	; 0x19d4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1922:	2b 81       	ldd	r18, Y+3	; 0x03
    1924:	3c 81       	ldd	r19, Y+4	; 0x04
    1926:	25 30       	cpi	r18, 0x05	; 5
    1928:	31 05       	cpc	r19, r1
    192a:	9c f4       	brge	.+38     	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	82 30       	cpi	r24, 0x02	; 2
    1932:	91 05       	cpc	r25, r1
    1934:	09 f4       	brne	.+2      	; 0x1938 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1936:	48 c0       	rjmp	.+144    	; 0x19c8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1938:	2b 81       	ldd	r18, Y+3	; 0x03
    193a:	3c 81       	ldd	r19, Y+4	; 0x04
    193c:	23 30       	cpi	r18, 0x03	; 3
    193e:	31 05       	cpc	r19, r1
    1940:	0c f0       	brlt	.+2      	; 0x1944 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1942:	45 c0       	rjmp	.+138    	; 0x19ce <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	91 05       	cpc	r25, r1
    194c:	09 f4       	brne	.+2      	; 0x1950 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    194e:	39 c0       	rjmp	.+114    	; 0x19c2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1950:	67 c0       	rjmp	.+206    	; 0x1a20 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	3c 81       	ldd	r19, Y+4	; 0x04
    1956:	26 30       	cpi	r18, 0x06	; 6
    1958:	31 05       	cpc	r19, r1
    195a:	09 f4       	brne	.+2      	; 0x195e <KEYPAD_4x4_adjustKeyNumber+0x78>
    195c:	41 c0       	rjmp	.+130    	; 0x19e0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	87 30       	cpi	r24, 0x07	; 7
    1964:	91 05       	cpc	r25, r1
    1966:	0c f0       	brlt	.+2      	; 0x196a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1968:	3e c0       	rjmp	.+124    	; 0x19e6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    196a:	37 c0       	rjmp	.+110    	; 0x19da <KEYPAD_4x4_adjustKeyNumber+0xf4>
    196c:	2b 81       	ldd	r18, Y+3	; 0x03
    196e:	3c 81       	ldd	r19, Y+4	; 0x04
    1970:	2c 30       	cpi	r18, 0x0C	; 12
    1972:	31 05       	cpc	r19, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1976:	46 c0       	rjmp	.+140    	; 0x1a04 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	8d 30       	cpi	r24, 0x0D	; 13
    197e:	91 05       	cpc	r25, r1
    1980:	5c f4       	brge	.+22     	; 0x1998 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	2a 30       	cpi	r18, 0x0A	; 10
    1988:	31 05       	cpc	r19, r1
    198a:	b1 f1       	breq	.+108    	; 0x19f8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	8b 30       	cpi	r24, 0x0B	; 11
    1992:	91 05       	cpc	r25, r1
    1994:	a4 f5       	brge	.+104    	; 0x19fe <KEYPAD_4x4_adjustKeyNumber+0x118>
    1996:	2d c0       	rjmp	.+90     	; 0x19f2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1998:	2b 81       	ldd	r18, Y+3	; 0x03
    199a:	3c 81       	ldd	r19, Y+4	; 0x04
    199c:	2e 30       	cpi	r18, 0x0E	; 14
    199e:	31 05       	cpc	r19, r1
    19a0:	b9 f1       	breq	.+110    	; 0x1a10 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	8e 30       	cpi	r24, 0x0E	; 14
    19a8:	91 05       	cpc	r25, r1
    19aa:	7c f1       	brlt	.+94     	; 0x1a0a <KEYPAD_4x4_adjustKeyNumber+0x124>
    19ac:	2b 81       	ldd	r18, Y+3	; 0x03
    19ae:	3c 81       	ldd	r19, Y+4	; 0x04
    19b0:	2f 30       	cpi	r18, 0x0F	; 15
    19b2:	31 05       	cpc	r19, r1
    19b4:	79 f1       	breq	.+94     	; 0x1a14 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ba:	80 31       	cpi	r24, 0x10	; 16
    19bc:	91 05       	cpc	r25, r1
    19be:	69 f1       	breq	.+90     	; 0x1a1a <KEYPAD_4x4_adjustKeyNumber+0x134>
    19c0:	2f c0       	rjmp	.+94     	; 0x1a20 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    19c2:	87 e0       	ldi	r24, 0x07	; 7
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	2e c0       	rjmp	.+92     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    19c8:	88 e0       	ldi	r24, 0x08	; 8
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	2b c0       	rjmp	.+86     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    19ce:	89 e0       	ldi	r24, 0x09	; 9
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	28 c0       	rjmp	.+80     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    19d4:	85 e2       	ldi	r24, 0x25	; 37
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	25 c0       	rjmp	.+74     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    19da:	84 e0       	ldi	r24, 0x04	; 4
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	22 c0       	rjmp	.+68     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    19e0:	85 e0       	ldi	r24, 0x05	; 5
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	1f c0       	rjmp	.+62     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    19e6:	86 e0       	ldi	r24, 0x06	; 6
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	1c c0       	rjmp	.+56     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    19ec:	8a e2       	ldi	r24, 0x2A	; 42
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	19 c0       	rjmp	.+50     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	16 c0       	rjmp	.+44     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	13 c0       	rjmp	.+38     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	10 c0       	rjmp	.+32     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1a04:	8d e2       	ldi	r24, 0x2D	; 45
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	0d c0       	rjmp	.+26     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1a0a:	8d e0       	ldi	r24, 0x0D	; 13
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	0a c0       	rjmp	.+20     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1a10:	19 82       	std	Y+1, r1	; 0x01
    1a12:	08 c0       	rjmp	.+16     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1a14:	8d e3       	ldi	r24, 0x3D	; 61
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	05 c0       	rjmp	.+10     	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1a1a:	8b e2       	ldi	r24, 0x2B	; 43
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	65 e0       	ldi	r22, 0x05	; 5
    1a40:	41 e0       	ldi	r20, 0x01	; 1
    1a42:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	66 e0       	ldi	r22, 0x06	; 6
    1a4a:	41 e0       	ldi	r20, 0x01	; 1
    1a4c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	67 e0       	ldi	r22, 0x07	; 7
    1a54:	41 e0       	ldi	r20, 0x01	; 1
    1a56:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	6f ef       	ldi	r22, 0xFF	; 255
    1a5e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1a62:	88 e3       	ldi	r24, 0x38	; 56
    1a64:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a68:	8c e0       	ldi	r24, 0x0C	; 12
    1a6a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_sendCommand>
}
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	ea 97       	sbiw	r28, 0x3a	; 58
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1a90:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	65 e0       	ldi	r22, 0x05	; 5
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	66 e0       	ldi	r22, 0x06	; 6
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePin>
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a0 e8       	ldi	r26, 0x80	; 128
    1aac:	bf e3       	ldi	r27, 0x3F	; 63
    1aae:	8d ab       	std	Y+53, r24	; 0x35
    1ab0:	9e ab       	std	Y+54, r25	; 0x36
    1ab2:	af ab       	std	Y+55, r26	; 0x37
    1ab4:	b8 af       	std	Y+56, r27	; 0x38
#define F_CPU 8000000 // ADDED PART FROM MEEEEEEEEEEEEEEEE!!
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ab8:	7e a9       	ldd	r23, Y+54	; 0x36
    1aba:	8f a9       	ldd	r24, Y+55	; 0x37
    1abc:	98 ad       	ldd	r25, Y+56	; 0x38
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4a ef       	ldi	r20, 0xFA	; 250
    1ac4:	54 e4       	ldi	r21, 0x44	; 68
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	89 ab       	std	Y+49, r24	; 0x31
    1ad0:	9a ab       	std	Y+50, r25	; 0x32
    1ad2:	ab ab       	std	Y+51, r26	; 0x33
    1ad4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ad6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad8:	7a a9       	ldd	r23, Y+50	; 0x32
    1ada:	8b a9       	ldd	r24, Y+51	; 0x33
    1adc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	98 ab       	std	Y+48, r25	; 0x30
    1af4:	8f a7       	std	Y+47, r24	; 0x2f
    1af6:	3f c0       	rjmp	.+126    	; 0x1b76 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1af8:	69 a9       	ldd	r22, Y+49	; 0x31
    1afa:	7a a9       	ldd	r23, Y+50	; 0x32
    1afc:	8b a9       	ldd	r24, Y+51	; 0x33
    1afe:	9c a9       	ldd	r25, Y+52	; 0x34
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	57 e4       	ldi	r21, 0x47	; 71
    1b08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	4c f5       	brge	.+82     	; 0x1b62 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b10:	6d a9       	ldd	r22, Y+53	; 0x35
    1b12:	7e a9       	ldd	r23, Y+54	; 0x36
    1b14:	8f a9       	ldd	r24, Y+55	; 0x37
    1b16:	98 ad       	ldd	r25, Y+56	; 0x38
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e2       	ldi	r20, 0x20	; 32
    1b1e:	51 e4       	ldi	r21, 0x41	; 65
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	98 ab       	std	Y+48, r25	; 0x30
    1b36:	8f a7       	std	Y+47, r24	; 0x2f
    1b38:	0f c0       	rjmp	.+30     	; 0x1b58 <LCD_sendCommand+0xde>
    1b3a:	88 ec       	ldi	r24, 0xC8	; 200
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9e a7       	std	Y+46, r25	; 0x2e
    1b40:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b42:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b44:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <LCD_sendCommand+0xcc>
    1b4a:	9e a7       	std	Y+46, r25	; 0x2e
    1b4c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b50:	98 a9       	ldd	r25, Y+48	; 0x30
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	98 ab       	std	Y+48, r25	; 0x30
    1b56:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	69 f7       	brne	.-38     	; 0x1b3a <LCD_sendCommand+0xc0>
    1b60:	14 c0       	rjmp	.+40     	; 0x1b8a <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b62:	69 a9       	ldd	r22, Y+49	; 0x31
    1b64:	7a a9       	ldd	r23, Y+50	; 0x32
    1b66:	8b a9       	ldd	r24, Y+51	; 0x33
    1b68:	9c a9       	ldd	r25, Y+52	; 0x34
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	98 ab       	std	Y+48, r25	; 0x30
    1b74:	8f a7       	std	Y+47, r24	; 0x2f
    1b76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b78:	98 a9       	ldd	r25, Y+48	; 0x30
    1b7a:	9c a7       	std	Y+44, r25	; 0x2c
    1b7c:	8b a7       	std	Y+43, r24	; 0x2b
    1b7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b80:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LCD_sendCommand+0x108>
    1b86:	9c a7       	std	Y+44, r25	; 0x2c
    1b88:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	67 e0       	ldi	r22, 0x07	; 7
    1b8e:	41 e0       	ldi	r20, 0x01	; 1
    1b90:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePin>
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a0 e8       	ldi	r26, 0x80	; 128
    1b9a:	bf e3       	ldi	r27, 0x3F	; 63
    1b9c:	8f a3       	std	Y+39, r24	; 0x27
    1b9e:	98 a7       	std	Y+40, r25	; 0x28
    1ba0:	a9 a7       	std	Y+41, r26	; 0x29
    1ba2:	ba a7       	std	Y+42, r27	; 0x2a
#define F_CPU 8000000 // ADDED PART FROM MEEEEEEEEEEEEEEEE!!
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ba8:	89 a5       	ldd	r24, Y+41	; 0x29
    1baa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	4a ef       	ldi	r20, 0xFA	; 250
    1bb2:	54 e4       	ldi	r21, 0x44	; 68
    1bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	8b a3       	std	Y+35, r24	; 0x23
    1bbe:	9c a3       	std	Y+36, r25	; 0x24
    1bc0:	ad a3       	std	Y+37, r26	; 0x25
    1bc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bca:	9e a1       	ldd	r25, Y+38	; 0x26
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e8       	ldi	r20, 0x80	; 128
    1bd2:	5f e3       	ldi	r21, 0x3F	; 63
    1bd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd8:	88 23       	and	r24, r24
    1bda:	2c f4       	brge	.+10     	; 0x1be6 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9a a3       	std	Y+34, r25	; 0x22
    1be2:	89 a3       	std	Y+33, r24	; 0x21
    1be4:	3f c0       	rjmp	.+126    	; 0x1c64 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1be6:	6b a1       	ldd	r22, Y+35	; 0x23
    1be8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bea:	8d a1       	ldd	r24, Y+37	; 0x25
    1bec:	9e a1       	ldd	r25, Y+38	; 0x26
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	3f ef       	ldi	r19, 0xFF	; 255
    1bf2:	4f e7       	ldi	r20, 0x7F	; 127
    1bf4:	57 e4       	ldi	r21, 0x47	; 71
    1bf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bfa:	18 16       	cp	r1, r24
    1bfc:	4c f5       	brge	.+82     	; 0x1c50 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfe:	6f a1       	ldd	r22, Y+39	; 0x27
    1c00:	78 a5       	ldd	r23, Y+40	; 0x28
    1c02:	89 a5       	ldd	r24, Y+41	; 0x29
    1c04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e2       	ldi	r20, 0x20	; 32
    1c0c:	51 e4       	ldi	r21, 0x41	; 65
    1c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	bc 01       	movw	r22, r24
    1c18:	cd 01       	movw	r24, r26
    1c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9a a3       	std	Y+34, r25	; 0x22
    1c24:	89 a3       	std	Y+33, r24	; 0x21
    1c26:	0f c0       	rjmp	.+30     	; 0x1c46 <LCD_sendCommand+0x1cc>
    1c28:	88 ec       	ldi	r24, 0xC8	; 200
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	98 a3       	std	Y+32, r25	; 0x20
    1c2e:	8f 8f       	std	Y+31, r24	; 0x1f
    1c30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c32:	98 a1       	ldd	r25, Y+32	; 0x20
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <LCD_sendCommand+0x1ba>
    1c38:	98 a3       	std	Y+32, r25	; 0x20
    1c3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	9a a3       	std	Y+34, r25	; 0x22
    1c44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c46:	89 a1       	ldd	r24, Y+33	; 0x21
    1c48:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	69 f7       	brne	.-38     	; 0x1c28 <LCD_sendCommand+0x1ae>
    1c4e:	14 c0       	rjmp	.+40     	; 0x1c78 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c50:	6b a1       	ldd	r22, Y+35	; 0x23
    1c52:	7c a1       	ldd	r23, Y+36	; 0x24
    1c54:	8d a1       	ldd	r24, Y+37	; 0x25
    1c56:	9e a1       	ldd	r25, Y+38	; 0x26
    1c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9a a3       	std	Y+34, r25	; 0x22
    1c62:	89 a3       	std	Y+33, r24	; 0x21
    1c64:	89 a1       	ldd	r24, Y+33	; 0x21
    1c66:	9a a1       	ldd	r25, Y+34	; 0x22
    1c68:	9e 8f       	std	Y+30, r25	; 0x1e
    1c6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <LCD_sendCommand+0x1f6>
    1c74:	9e 8f       	std	Y+30, r25	; 0x1e
    1c76:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	6a ad       	ldd	r22, Y+58	; 0x3a
    1c7c:	0e 94 99 0b 	call	0x1732	; 0x1732 <GPIO_writePort>
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a0 e8       	ldi	r26, 0x80	; 128
    1c86:	bf e3       	ldi	r27, 0x3F	; 63
    1c88:	89 8f       	std	Y+25, r24	; 0x19
    1c8a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c8c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c8e:	bc 8f       	std	Y+28, r27	; 0x1c
#define F_CPU 8000000 // ADDED PART FROM MEEEEEEEEEEEEEEEE!!
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c90:	69 8d       	ldd	r22, Y+25	; 0x19
    1c92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	4a ef       	ldi	r20, 0xFA	; 250
    1c9e:	54 e4       	ldi	r21, 0x44	; 68
    1ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	8d 8b       	std	Y+21, r24	; 0x15
    1caa:	9e 8b       	std	Y+22, r25	; 0x16
    1cac:	af 8b       	std	Y+23, r26	; 0x17
    1cae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e8       	ldi	r20, 0x80	; 128
    1cbe:	5f e3       	ldi	r21, 0x3F	; 63
    1cc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc4:	88 23       	and	r24, r24
    1cc6:	2c f4       	brge	.+10     	; 0x1cd2 <LCD_sendCommand+0x258>
		__ticks = 1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9c 8b       	std	Y+20, r25	; 0x14
    1cce:	8b 8b       	std	Y+19, r24	; 0x13
    1cd0:	3f c0       	rjmp	.+126    	; 0x1d50 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	3f ef       	ldi	r19, 0xFF	; 255
    1cde:	4f e7       	ldi	r20, 0x7F	; 127
    1ce0:	57 e4       	ldi	r21, 0x47	; 71
    1ce2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce6:	18 16       	cp	r1, r24
    1ce8:	4c f5       	brge	.+82     	; 0x1d3c <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cea:	69 8d       	ldd	r22, Y+25	; 0x19
    1cec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e2       	ldi	r20, 0x20	; 32
    1cf8:	51 e4       	ldi	r21, 0x41	; 65
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	bc 01       	movw	r22, r24
    1d04:	cd 01       	movw	r24, r26
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9c 8b       	std	Y+20, r25	; 0x14
    1d10:	8b 8b       	std	Y+19, r24	; 0x13
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <LCD_sendCommand+0x2b8>
    1d14:	88 ec       	ldi	r24, 0xC8	; 200
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	9a 8b       	std	Y+18, r25	; 0x12
    1d1a:	89 8b       	std	Y+17, r24	; 0x11
    1d1c:	89 89       	ldd	r24, Y+17	; 0x11
    1d1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <LCD_sendCommand+0x2a6>
    1d24:	9a 8b       	std	Y+18, r25	; 0x12
    1d26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d28:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	9c 8b       	std	Y+20, r25	; 0x14
    1d30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d32:	8b 89       	ldd	r24, Y+19	; 0x13
    1d34:	9c 89       	ldd	r25, Y+20	; 0x14
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	69 f7       	brne	.-38     	; 0x1d14 <LCD_sendCommand+0x29a>
    1d3a:	14 c0       	rjmp	.+40     	; 0x1d64 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d40:	8f 89       	ldd	r24, Y+23	; 0x17
    1d42:	98 8d       	ldd	r25, Y+24	; 0x18
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9c 8b       	std	Y+20, r25	; 0x14
    1d4e:	8b 8b       	std	Y+19, r24	; 0x13
    1d50:	8b 89       	ldd	r24, Y+19	; 0x13
    1d52:	9c 89       	ldd	r25, Y+20	; 0x14
    1d54:	98 8b       	std	Y+16, r25	; 0x10
    1d56:	8f 87       	std	Y+15, r24	; 0x0f
    1d58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5a:	98 89       	ldd	r25, Y+16	; 0x10
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <LCD_sendCommand+0x2e2>
    1d60:	98 8b       	std	Y+16, r25	; 0x10
    1d62:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	67 e0       	ldi	r22, 0x07	; 7
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePin>
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	a0 e8       	ldi	r26, 0x80	; 128
    1d74:	bf e3       	ldi	r27, 0x3F	; 63
    1d76:	8b 87       	std	Y+11, r24	; 0x0b
    1d78:	9c 87       	std	Y+12, r25	; 0x0c
    1d7a:	ad 87       	std	Y+13, r26	; 0x0d
    1d7c:	be 87       	std	Y+14, r27	; 0x0e
#define F_CPU 8000000 // ADDED PART FROM MEEEEEEEEEEEEEEEE!!
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	4a ef       	ldi	r20, 0xFA	; 250
    1d8c:	54 e4       	ldi	r21, 0x44	; 68
    1d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	8f 83       	std	Y+7, r24	; 0x07
    1d98:	98 87       	std	Y+8, r25	; 0x08
    1d9a:	a9 87       	std	Y+9, r26	; 0x09
    1d9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1da0:	78 85       	ldd	r23, Y+8	; 0x08
    1da2:	89 85       	ldd	r24, Y+9	; 0x09
    1da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e8       	ldi	r20, 0x80	; 128
    1dac:	5f e3       	ldi	r21, 0x3F	; 63
    1dae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db2:	88 23       	and	r24, r24
    1db4:	2c f4       	brge	.+10     	; 0x1dc0 <LCD_sendCommand+0x346>
		__ticks = 1;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	3f c0       	rjmp	.+126    	; 0x1e3e <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	3f ef       	ldi	r19, 0xFF	; 255
    1dcc:	4f e7       	ldi	r20, 0x7F	; 127
    1dce:	57 e4       	ldi	r21, 0x47	; 71
    1dd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd4:	18 16       	cp	r1, r24
    1dd6:	4c f5       	brge	.+82     	; 0x1e2a <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e2       	ldi	r20, 0x20	; 32
    1de6:	51 e4       	ldi	r21, 0x41	; 65
    1de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	bc 01       	movw	r22, r24
    1df2:	cd 01       	movw	r24, r26
    1df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	0f c0       	rjmp	.+30     	; 0x1e20 <LCD_sendCommand+0x3a6>
    1e02:	88 ec       	ldi	r24, 0xC8	; 200
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9c 83       	std	Y+4, r25	; 0x04
    1e08:	8b 83       	std	Y+3, r24	; 0x03
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	f1 f7       	brne	.-4      	; 0x1e0e <LCD_sendCommand+0x394>
    1e12:	9c 83       	std	Y+4, r25	; 0x04
    1e14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e20:	8d 81       	ldd	r24, Y+5	; 0x05
    1e22:	9e 81       	ldd	r25, Y+6	; 0x06
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	69 f7       	brne	.-38     	; 0x1e02 <LCD_sendCommand+0x388>
    1e28:	14 c0       	rjmp	.+40     	; 0x1e52 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2c:	78 85       	ldd	r23, Y+8	; 0x08
    1e2e:	89 85       	ldd	r24, Y+9	; 0x09
    1e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9e 83       	std	Y+6, r25	; 0x06
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
    1e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e40:	9e 81       	ldd	r25, Y+6	; 0x06
    1e42:	9a 83       	std	Y+2, r25	; 0x02
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_sendCommand+0x3d0>
    1e4e:	9a 83       	std	Y+2, r25	; 0x02
    1e50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e52:	ea 96       	adiw	r28, 0x3a	; 58
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	ea 97       	sbiw	r28, 0x3a	; 58
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1e7a:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	65 e0       	ldi	r22, 0x05	; 5
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	66 e0       	ldi	r22, 0x06	; 6
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePin>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a0 e8       	ldi	r26, 0x80	; 128
    1e96:	bf e3       	ldi	r27, 0x3F	; 63
    1e98:	8d ab       	std	Y+53, r24	; 0x35
    1e9a:	9e ab       	std	Y+54, r25	; 0x36
    1e9c:	af ab       	std	Y+55, r26	; 0x37
    1e9e:	b8 af       	std	Y+56, r27	; 0x38
#define F_CPU 8000000 // ADDED PART FROM MEEEEEEEEEEEEEEEE!!
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ea4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ea6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	4a ef       	ldi	r20, 0xFA	; 250
    1eae:	54 e4       	ldi	r21, 0x44	; 68
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	89 ab       	std	Y+49, r24	; 0x31
    1eba:	9a ab       	std	Y+50, r25	; 0x32
    1ebc:	ab ab       	std	Y+51, r26	; 0x33
    1ebe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ec0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e8       	ldi	r20, 0x80	; 128
    1ece:	5f e3       	ldi	r21, 0x3F	; 63
    1ed0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed4:	88 23       	and	r24, r24
    1ed6:	2c f4       	brge	.+10     	; 0x1ee2 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	98 ab       	std	Y+48, r25	; 0x30
    1ede:	8f a7       	std	Y+47, r24	; 0x2f
    1ee0:	3f c0       	rjmp	.+126    	; 0x1f60 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    1ee2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ee8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	3f ef       	ldi	r19, 0xFF	; 255
    1eee:	4f e7       	ldi	r20, 0x7F	; 127
    1ef0:	57 e4       	ldi	r21, 0x47	; 71
    1ef2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef6:	18 16       	cp	r1, r24
    1ef8:	4c f5       	brge	.+82     	; 0x1f4c <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efa:	6d a9       	ldd	r22, Y+53	; 0x35
    1efc:	7e a9       	ldd	r23, Y+54	; 0x36
    1efe:	8f a9       	ldd	r24, Y+55	; 0x37
    1f00:	98 ad       	ldd	r25, Y+56	; 0x38
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e2       	ldi	r20, 0x20	; 32
    1f08:	51 e4       	ldi	r21, 0x41	; 65
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	98 ab       	std	Y+48, r25	; 0x30
    1f20:	8f a7       	std	Y+47, r24	; 0x2f
    1f22:	0f c0       	rjmp	.+30     	; 0x1f42 <LCD_displayCharacter+0xde>
    1f24:	88 ec       	ldi	r24, 0xC8	; 200
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	9e a7       	std	Y+46, r25	; 0x2e
    1f2a:	8d a7       	std	Y+45, r24	; 0x2d
    1f2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <LCD_displayCharacter+0xcc>
    1f34:	9e a7       	std	Y+46, r25	; 0x2e
    1f36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	98 ab       	std	Y+48, r25	; 0x30
    1f40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f44:	98 a9       	ldd	r25, Y+48	; 0x30
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	69 f7       	brne	.-38     	; 0x1f24 <LCD_displayCharacter+0xc0>
    1f4a:	14 c0       	rjmp	.+40     	; 0x1f74 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f50:	8b a9       	ldd	r24, Y+51	; 0x33
    1f52:	9c a9       	ldd	r25, Y+52	; 0x34
    1f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	98 ab       	std	Y+48, r25	; 0x30
    1f5e:	8f a7       	std	Y+47, r24	; 0x2f
    1f60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f62:	98 a9       	ldd	r25, Y+48	; 0x30
    1f64:	9c a7       	std	Y+44, r25	; 0x2c
    1f66:	8b a7       	std	Y+43, r24	; 0x2b
    1f68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <LCD_displayCharacter+0x108>
    1f70:	9c a7       	std	Y+44, r25	; 0x2c
    1f72:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	67 e0       	ldi	r22, 0x07	; 7
    1f78:	41 e0       	ldi	r20, 0x01	; 1
    1f7a:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePin>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a0 e8       	ldi	r26, 0x80	; 128
    1f84:	bf e3       	ldi	r27, 0x3F	; 63
    1f86:	8f a3       	std	Y+39, r24	; 0x27
    1f88:	98 a7       	std	Y+40, r25	; 0x28
    1f8a:	a9 a7       	std	Y+41, r26	; 0x29
    1f8c:	ba a7       	std	Y+42, r27	; 0x2a
#define F_CPU 8000000 // ADDED PART FROM MEEEEEEEEEEEEEEEE!!
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f90:	78 a5       	ldd	r23, Y+40	; 0x28
    1f92:	89 a5       	ldd	r24, Y+41	; 0x29
    1f94:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	4a ef       	ldi	r20, 0xFA	; 250
    1f9c:	54 e4       	ldi	r21, 0x44	; 68
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	8b a3       	std	Y+35, r24	; 0x23
    1fa8:	9c a3       	std	Y+36, r25	; 0x24
    1faa:	ad a3       	std	Y+37, r26	; 0x25
    1fac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fae:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e8       	ldi	r20, 0x80	; 128
    1fbc:	5f e3       	ldi	r21, 0x3F	; 63
    1fbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc2:	88 23       	and	r24, r24
    1fc4:	2c f4       	brge	.+10     	; 0x1fd0 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	9a a3       	std	Y+34, r25	; 0x22
    1fcc:	89 a3       	std	Y+33, r24	; 0x21
    1fce:	3f c0       	rjmp	.+126    	; 0x204e <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    1fd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	3f ef       	ldi	r19, 0xFF	; 255
    1fdc:	4f e7       	ldi	r20, 0x7F	; 127
    1fde:	57 e4       	ldi	r21, 0x47	; 71
    1fe0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe4:	18 16       	cp	r1, r24
    1fe6:	4c f5       	brge	.+82     	; 0x203a <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe8:	6f a1       	ldd	r22, Y+39	; 0x27
    1fea:	78 a5       	ldd	r23, Y+40	; 0x28
    1fec:	89 a5       	ldd	r24, Y+41	; 0x29
    1fee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e2       	ldi	r20, 0x20	; 32
    1ff6:	51 e4       	ldi	r21, 0x41	; 65
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9a a3       	std	Y+34, r25	; 0x22
    200e:	89 a3       	std	Y+33, r24	; 0x21
    2010:	0f c0       	rjmp	.+30     	; 0x2030 <LCD_displayCharacter+0x1cc>
    2012:	88 ec       	ldi	r24, 0xC8	; 200
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	98 a3       	std	Y+32, r25	; 0x20
    2018:	8f 8f       	std	Y+31, r24	; 0x1f
    201a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    201c:	98 a1       	ldd	r25, Y+32	; 0x20
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <LCD_displayCharacter+0x1ba>
    2022:	98 a3       	std	Y+32, r25	; 0x20
    2024:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2026:	89 a1       	ldd	r24, Y+33	; 0x21
    2028:	9a a1       	ldd	r25, Y+34	; 0x22
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	9a a3       	std	Y+34, r25	; 0x22
    202e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2030:	89 a1       	ldd	r24, Y+33	; 0x21
    2032:	9a a1       	ldd	r25, Y+34	; 0x22
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	69 f7       	brne	.-38     	; 0x2012 <LCD_displayCharacter+0x1ae>
    2038:	14 c0       	rjmp	.+40     	; 0x2062 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203a:	6b a1       	ldd	r22, Y+35	; 0x23
    203c:	7c a1       	ldd	r23, Y+36	; 0x24
    203e:	8d a1       	ldd	r24, Y+37	; 0x25
    2040:	9e a1       	ldd	r25, Y+38	; 0x26
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9a a3       	std	Y+34, r25	; 0x22
    204c:	89 a3       	std	Y+33, r24	; 0x21
    204e:	89 a1       	ldd	r24, Y+33	; 0x21
    2050:	9a a1       	ldd	r25, Y+34	; 0x22
    2052:	9e 8f       	std	Y+30, r25	; 0x1e
    2054:	8d 8f       	std	Y+29, r24	; 0x1d
    2056:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2058:	9e 8d       	ldd	r25, Y+30	; 0x1e
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_displayCharacter+0x1f6>
    205e:	9e 8f       	std	Y+30, r25	; 0x1e
    2060:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	6a ad       	ldd	r22, Y+58	; 0x3a
    2066:	0e 94 99 0b 	call	0x1732	; 0x1732 <GPIO_writePort>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 e8       	ldi	r26, 0x80	; 128
    2070:	bf e3       	ldi	r27, 0x3F	; 63
    2072:	89 8f       	std	Y+25, r24	; 0x19
    2074:	9a 8f       	std	Y+26, r25	; 0x1a
    2076:	ab 8f       	std	Y+27, r26	; 0x1b
    2078:	bc 8f       	std	Y+28, r27	; 0x1c
#define F_CPU 8000000 // ADDED PART FROM MEEEEEEEEEEEEEEEE!!
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207a:	69 8d       	ldd	r22, Y+25	; 0x19
    207c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    207e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2080:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4a ef       	ldi	r20, 0xFA	; 250
    2088:	54 e4       	ldi	r21, 0x44	; 68
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	8d 8b       	std	Y+21, r24	; 0x15
    2094:	9e 8b       	std	Y+22, r25	; 0x16
    2096:	af 8b       	std	Y+23, r26	; 0x17
    2098:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    209a:	6d 89       	ldd	r22, Y+21	; 0x15
    209c:	7e 89       	ldd	r23, Y+22	; 0x16
    209e:	8f 89       	ldd	r24, Y+23	; 0x17
    20a0:	98 8d       	ldd	r25, Y+24	; 0x18
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	2c f4       	brge	.+10     	; 0x20bc <LCD_displayCharacter+0x258>
		__ticks = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9c 8b       	std	Y+20, r25	; 0x14
    20b8:	8b 8b       	std	Y+19, r24	; 0x13
    20ba:	3f c0       	rjmp	.+126    	; 0x213a <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    20bc:	6d 89       	ldd	r22, Y+21	; 0x15
    20be:	7e 89       	ldd	r23, Y+22	; 0x16
    20c0:	8f 89       	ldd	r24, Y+23	; 0x17
    20c2:	98 8d       	ldd	r25, Y+24	; 0x18
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	3f ef       	ldi	r19, 0xFF	; 255
    20c8:	4f e7       	ldi	r20, 0x7F	; 127
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d0:	18 16       	cp	r1, r24
    20d2:	4c f5       	brge	.+82     	; 0x2126 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d4:	69 8d       	ldd	r22, Y+25	; 0x19
    20d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e2       	ldi	r20, 0x20	; 32
    20e2:	51 e4       	ldi	r21, 0x41	; 65
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9c 8b       	std	Y+20, r25	; 0x14
    20fa:	8b 8b       	std	Y+19, r24	; 0x13
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <LCD_displayCharacter+0x2b8>
    20fe:	88 ec       	ldi	r24, 0xC8	; 200
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9a 8b       	std	Y+18, r25	; 0x12
    2104:	89 8b       	std	Y+17, r24	; 0x11
    2106:	89 89       	ldd	r24, Y+17	; 0x11
    2108:	9a 89       	ldd	r25, Y+18	; 0x12
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_displayCharacter+0x2a6>
    210e:	9a 8b       	std	Y+18, r25	; 0x12
    2110:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2112:	8b 89       	ldd	r24, Y+19	; 0x13
    2114:	9c 89       	ldd	r25, Y+20	; 0x14
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	9c 8b       	std	Y+20, r25	; 0x14
    211a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	8b 89       	ldd	r24, Y+19	; 0x13
    211e:	9c 89       	ldd	r25, Y+20	; 0x14
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	69 f7       	brne	.-38     	; 0x20fe <LCD_displayCharacter+0x29a>
    2124:	14 c0       	rjmp	.+40     	; 0x214e <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2126:	6d 89       	ldd	r22, Y+21	; 0x15
    2128:	7e 89       	ldd	r23, Y+22	; 0x16
    212a:	8f 89       	ldd	r24, Y+23	; 0x17
    212c:	98 8d       	ldd	r25, Y+24	; 0x18
    212e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9c 8b       	std	Y+20, r25	; 0x14
    2138:	8b 8b       	std	Y+19, r24	; 0x13
    213a:	8b 89       	ldd	r24, Y+19	; 0x13
    213c:	9c 89       	ldd	r25, Y+20	; 0x14
    213e:	98 8b       	std	Y+16, r25	; 0x10
    2140:	8f 87       	std	Y+15, r24	; 0x0f
    2142:	8f 85       	ldd	r24, Y+15	; 0x0f
    2144:	98 89       	ldd	r25, Y+16	; 0x10
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <LCD_displayCharacter+0x2e2>
    214a:	98 8b       	std	Y+16, r25	; 0x10
    214c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	67 e0       	ldi	r22, 0x07	; 7
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	0e 94 cf 09 	call	0x139e	; 0x139e <GPIO_writePin>
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	a0 e8       	ldi	r26, 0x80	; 128
    215e:	bf e3       	ldi	r27, 0x3F	; 63
    2160:	8b 87       	std	Y+11, r24	; 0x0b
    2162:	9c 87       	std	Y+12, r25	; 0x0c
    2164:	ad 87       	std	Y+13, r26	; 0x0d
    2166:	be 87       	std	Y+14, r27	; 0x0e
#define F_CPU 8000000 // ADDED PART FROM MEEEEEEEEEEEEEEEE!!
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2168:	6b 85       	ldd	r22, Y+11	; 0x0b
    216a:	7c 85       	ldd	r23, Y+12	; 0x0c
    216c:	8d 85       	ldd	r24, Y+13	; 0x0d
    216e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	4a ef       	ldi	r20, 0xFA	; 250
    2176:	54 e4       	ldi	r21, 0x44	; 68
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	8f 83       	std	Y+7, r24	; 0x07
    2182:	98 87       	std	Y+8, r25	; 0x08
    2184:	a9 87       	std	Y+9, r26	; 0x09
    2186:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2188:	6f 81       	ldd	r22, Y+7	; 0x07
    218a:	78 85       	ldd	r23, Y+8	; 0x08
    218c:	89 85       	ldd	r24, Y+9	; 0x09
    218e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e8       	ldi	r20, 0x80	; 128
    2196:	5f e3       	ldi	r21, 0x3F	; 63
    2198:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    219c:	88 23       	and	r24, r24
    219e:	2c f4       	brge	.+10     	; 0x21aa <LCD_displayCharacter+0x346>
		__ticks = 1;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	9e 83       	std	Y+6, r25	; 0x06
    21a6:	8d 83       	std	Y+5, r24	; 0x05
    21a8:	3f c0       	rjmp	.+126    	; 0x2228 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    21aa:	6f 81       	ldd	r22, Y+7	; 0x07
    21ac:	78 85       	ldd	r23, Y+8	; 0x08
    21ae:	89 85       	ldd	r24, Y+9	; 0x09
    21b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	3f ef       	ldi	r19, 0xFF	; 255
    21b6:	4f e7       	ldi	r20, 0x7F	; 127
    21b8:	57 e4       	ldi	r21, 0x47	; 71
    21ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21be:	18 16       	cp	r1, r24
    21c0:	4c f5       	brge	.+82     	; 0x2214 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e2       	ldi	r20, 0x20	; 32
    21d0:	51 e4       	ldi	r21, 0x41	; 65
    21d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	bc 01       	movw	r22, r24
    21dc:	cd 01       	movw	r24, r26
    21de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9e 83       	std	Y+6, r25	; 0x06
    21e8:	8d 83       	std	Y+5, r24	; 0x05
    21ea:	0f c0       	rjmp	.+30     	; 0x220a <LCD_displayCharacter+0x3a6>
    21ec:	88 ec       	ldi	r24, 0xC8	; 200
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	9c 83       	std	Y+4, r25	; 0x04
    21f2:	8b 83       	std	Y+3, r24	; 0x03
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <LCD_displayCharacter+0x394>
    21fc:	9c 83       	std	Y+4, r25	; 0x04
    21fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	9e 81       	ldd	r25, Y+6	; 0x06
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	9e 83       	std	Y+6, r25	; 0x06
    2208:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220a:	8d 81       	ldd	r24, Y+5	; 0x05
    220c:	9e 81       	ldd	r25, Y+6	; 0x06
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	69 f7       	brne	.-38     	; 0x21ec <LCD_displayCharacter+0x388>
    2212:	14 c0       	rjmp	.+40     	; 0x223c <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2214:	6f 81       	ldd	r22, Y+7	; 0x07
    2216:	78 85       	ldd	r23, Y+8	; 0x08
    2218:	89 85       	ldd	r24, Y+9	; 0x09
    221a:	9a 85       	ldd	r25, Y+10	; 0x0a
    221c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9e 83       	std	Y+6, r25	; 0x06
    2226:	8d 83       	std	Y+5, r24	; 0x05
    2228:	8d 81       	ldd	r24, Y+5	; 0x05
    222a:	9e 81       	ldd	r25, Y+6	; 0x06
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	9a 81       	ldd	r25, Y+2	; 0x02
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <LCD_displayCharacter+0x3d0>
    2238:	9a 83       	std	Y+2, r25	; 0x02
    223a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    223c:	ea 96       	adiw	r28, 0x3a	; 58
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	00 d0       	rcall	.+0      	; 0x2254 <LCD_displayString+0x6>
    2254:	0f 92       	push	r0
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	9b 83       	std	Y+3, r25	; 0x03
    225c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    225e:	19 82       	std	Y+1, r1	; 0x01
    2260:	0e c0       	rjmp	.+28     	; 0x227e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	9b 81       	ldd	r25, Y+3	; 0x03
    226c:	fc 01       	movw	r30, r24
    226e:	e2 0f       	add	r30, r18
    2270:	f3 1f       	adc	r31, r19
    2272:	80 81       	ld	r24, Z
    2274:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_displayCharacter>
		i++;
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	8f 5f       	subi	r24, 0xFF	; 255
    227c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	9b 81       	ldd	r25, Y+3	; 0x03
    2288:	fc 01       	movw	r30, r24
    228a:	e2 0f       	add	r30, r18
    228c:	f3 1f       	adc	r31, r19
    228e:	80 81       	ld	r24, Z
    2290:	88 23       	and	r24, r24
    2292:	39 f7       	brne	.-50     	; 0x2262 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <LCD_moveCursor+0x6>
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <LCD_moveCursor+0x8>
    22a8:	0f 92       	push	r0
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	8a 83       	std	Y+2, r24	; 0x02
    22b0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	28 2f       	mov	r18, r24
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	3d 83       	std	Y+5, r19	; 0x05
    22ba:	2c 83       	std	Y+4, r18	; 0x04
    22bc:	8c 81       	ldd	r24, Y+4	; 0x04
    22be:	9d 81       	ldd	r25, Y+5	; 0x05
    22c0:	81 30       	cpi	r24, 0x01	; 1
    22c2:	91 05       	cpc	r25, r1
    22c4:	c1 f0       	breq	.+48     	; 0x22f6 <LCD_moveCursor+0x56>
    22c6:	2c 81       	ldd	r18, Y+4	; 0x04
    22c8:	3d 81       	ldd	r19, Y+5	; 0x05
    22ca:	22 30       	cpi	r18, 0x02	; 2
    22cc:	31 05       	cpc	r19, r1
    22ce:	2c f4       	brge	.+10     	; 0x22da <LCD_moveCursor+0x3a>
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	9d 81       	ldd	r25, Y+5	; 0x05
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	61 f0       	breq	.+24     	; 0x22f0 <LCD_moveCursor+0x50>
    22d8:	19 c0       	rjmp	.+50     	; 0x230c <LCD_moveCursor+0x6c>
    22da:	2c 81       	ldd	r18, Y+4	; 0x04
    22dc:	3d 81       	ldd	r19, Y+5	; 0x05
    22de:	22 30       	cpi	r18, 0x02	; 2
    22e0:	31 05       	cpc	r19, r1
    22e2:	69 f0       	breq	.+26     	; 0x22fe <LCD_moveCursor+0x5e>
    22e4:	8c 81       	ldd	r24, Y+4	; 0x04
    22e6:	9d 81       	ldd	r25, Y+5	; 0x05
    22e8:	83 30       	cpi	r24, 0x03	; 3
    22ea:	91 05       	cpc	r25, r1
    22ec:	61 f0       	breq	.+24     	; 0x2306 <LCD_moveCursor+0x66>
    22ee:	0e c0       	rjmp	.+28     	; 0x230c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	0b c0       	rjmp	.+22     	; 0x230c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	80 5c       	subi	r24, 0xC0	; 192
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	07 c0       	rjmp	.+14     	; 0x230c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	80 5f       	subi	r24, 0xF0	; 240
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	03 c0       	rjmp	.+6      	; 0x230c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	80 5b       	subi	r24, 0xB0	; 176
    230a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	80 68       	ori	r24, 0x80	; 128
    2310:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_sendCommand>
}
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <LCD_displayStringRowColumn+0x6>
    232a:	00 d0       	rcall	.+0      	; 0x232c <LCD_displayStringRowColumn+0x8>
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	6a 83       	std	Y+2, r22	; 0x02
    2334:	5c 83       	std	Y+4, r21	; 0x04
    2336:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	6a 81       	ldd	r22, Y+2	; 0x02
    233c:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_displayString>
}
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	62 97       	sbiw	r28, 0x12	; 18
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	9a 8b       	std	Y+18, r25	; 0x12
    236c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    236e:	89 89       	ldd	r24, Y+17	; 0x11
    2370:	9a 89       	ldd	r25, Y+18	; 0x12
    2372:	9e 01       	movw	r18, r28
    2374:	2f 5f       	subi	r18, 0xFF	; 255
    2376:	3f 4f       	sbci	r19, 0xFF	; 255
    2378:	b9 01       	movw	r22, r18
    237a:	4a e0       	ldi	r20, 0x0A	; 10
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <itoa>
   LCD_displayString(buff); /* Display the string */
    2382:	ce 01       	movw	r24, r28
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	0e 94 27 11 	call	0x224e	; 0x224e <LCD_displayString>
}
    238a:	62 96       	adiw	r28, 0x12	; 18
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	cd bf       	out	0x3d, r28	; 61
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_sendCommand>
}
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    23b0:	1f 92       	push	r1
    23b2:	0f 92       	push	r0
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	0f 92       	push	r0
    23b8:	11 24       	eor	r1, r1
    23ba:	2f 93       	push	r18
    23bc:	3f 93       	push	r19
    23be:	4f 93       	push	r20
    23c0:	5f 93       	push	r21
    23c2:	6f 93       	push	r22
    23c4:	7f 93       	push	r23
    23c6:	8f 93       	push	r24
    23c8:	9f 93       	push	r25
    23ca:	af 93       	push	r26
    23cc:	bf 93       	push	r27
    23ce:	ef 93       	push	r30
    23d0:	ff 93       	push	r31
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    23da:	80 91 b1 01 	lds	r24, 0x01B1
    23de:	90 91 b2 01 	lds	r25, 0x01B2
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	29 f0       	breq	.+10     	; 0x23f0 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    23e6:	e0 91 b1 01 	lds	r30, 0x01B1
    23ea:	f0 91 b2 01 	lds	r31, 0x01B2
    23ee:	09 95       	icall
	}
}
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	ff 91       	pop	r31
    23f6:	ef 91       	pop	r30
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	7f 91       	pop	r23
    2402:	6f 91       	pop	r22
    2404:	5f 91       	pop	r21
    2406:	4f 91       	pop	r20
    2408:	3f 91       	pop	r19
    240a:	2f 91       	pop	r18
    240c:	0f 90       	pop	r0
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	0f 90       	pop	r0
    2412:	1f 90       	pop	r1
    2414:	18 95       	reti

00002416 <__vector_19>:


ISR(TIMER0_COMP_vect)
{
    2416:	1f 92       	push	r1
    2418:	0f 92       	push	r0
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	0f 92       	push	r0
    241e:	11 24       	eor	r1, r1
    2420:	2f 93       	push	r18
    2422:	3f 93       	push	r19
    2424:	4f 93       	push	r20
    2426:	5f 93       	push	r21
    2428:	6f 93       	push	r22
    242a:	7f 93       	push	r23
    242c:	8f 93       	push	r24
    242e:	9f 93       	push	r25
    2430:	af 93       	push	r26
    2432:	bf 93       	push	r27
    2434:	ef 93       	push	r30
    2436:	ff 93       	push	r31
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2440:	80 91 b1 01 	lds	r24, 0x01B1
    2444:	90 91 b2 01 	lds	r25, 0x01B2
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	29 f0       	breq	.+10     	; 0x2456 <__vector_19+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    244c:	e0 91 b1 01 	lds	r30, 0x01B1
    2450:	f0 91 b2 01 	lds	r31, 0x01B2
    2454:	09 95       	icall
		}
}
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	ff 91       	pop	r31
    245c:	ef 91       	pop	r30
    245e:	bf 91       	pop	r27
    2460:	af 91       	pop	r26
    2462:	9f 91       	pop	r25
    2464:	8f 91       	pop	r24
    2466:	7f 91       	pop	r23
    2468:	6f 91       	pop	r22
    246a:	5f 91       	pop	r21
    246c:	4f 91       	pop	r20
    246e:	3f 91       	pop	r19
    2470:	2f 91       	pop	r18
    2472:	0f 90       	pop	r0
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	0f 90       	pop	r0
    2478:	1f 90       	pop	r1
    247a:	18 95       	reti

0000247c <TIMER_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/


void TIMER_Init(const Timer_ConfigType * Config_Ptr){
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	00 d0       	rcall	.+0      	; 0x2482 <TIMER_Init+0x6>
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	9a 83       	std	Y+2, r25	; 0x02
    2488:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = Config_Ptr->initial;
    248a:	a2 e5       	ldi	r26, 0x52	; 82
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e9 81       	ldd	r30, Y+1	; 0x01
    2490:	fa 81       	ldd	r31, Y+2	; 0x02
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	8c 93       	st	X, r24
	OCR0 = Config_Ptr->OCR_Value;
    2496:	ac e5       	ldi	r26, 0x5C	; 92
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e9 81       	ldd	r30, Y+1	; 0x01
    249c:	fa 81       	ldd	r31, Y+2	; 0x02
    249e:	83 81       	ldd	r24, Z+3	; 0x03
    24a0:	8c 93       	st	X, r24

	TCCR0 = (1<<FOC0) | ((Config_Ptr->mode)<<WGM01) | (Config_Ptr->OCR_mode<<COM00) | (Config_Ptr->prescaler<<CS00);
    24a2:	a3 e5       	ldi	r26, 0x53	; 83
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e9 81       	ldd	r30, Y+1	; 0x01
    24a8:	fa 81       	ldd	r31, Y+2	; 0x02
    24aa:	81 81       	ldd	r24, Z+1	; 0x01
    24ac:	88 2f       	mov	r24, r24
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	88 0f       	add	r24, r24
    24ba:	99 1f       	adc	r25, r25
    24bc:	28 2f       	mov	r18, r24
    24be:	20 68       	ori	r18, 0x80	; 128
    24c0:	e9 81       	ldd	r30, Y+1	; 0x01
    24c2:	fa 81       	ldd	r31, Y+2	; 0x02
    24c4:	80 81       	ld	r24, Z
    24c6:	88 2f       	mov	r24, r24
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	82 95       	swap	r24
    24cc:	92 95       	swap	r25
    24ce:	90 7f       	andi	r25, 0xF0	; 240
    24d0:	98 27       	eor	r25, r24
    24d2:	80 7f       	andi	r24, 0xF0	; 240
    24d4:	98 27       	eor	r25, r24
    24d6:	92 2f       	mov	r25, r18
    24d8:	98 2b       	or	r25, r24
    24da:	e9 81       	ldd	r30, Y+1	; 0x01
    24dc:	fa 81       	ldd	r31, Y+2	; 0x02
    24de:	84 81       	ldd	r24, Z+4	; 0x04
    24e0:	89 2b       	or	r24, r25
    24e2:	8c 93       	st	X, r24

	TIMSK |= (1<<OCIE0) | (1<<TOIE0);
    24e4:	a9 e5       	ldi	r26, 0x59	; 89
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e9 e5       	ldi	r30, 0x59	; 89
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	83 60       	ori	r24, 0x03	; 3
    24f0:	8c 93       	st	X, r24
}
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <TIMER_setCallBack>:


void TIMER_setCallBack(void(*a_ptr)(void)){
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	00 d0       	rcall	.+0      	; 0x2502 <TIMER_setCallBack+0x6>
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr = a_ptr;
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	9a 81       	ldd	r25, Y+2	; 0x02
    250e:	90 93 b2 01 	sts	0x01B2, r25
    2512:	80 93 b1 01 	sts	0x01B1, r24

}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <TIMER_DeInit>:



void TIMER_DeInit(){
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
	TCNT0 =0;
    2528:	e2 e5       	ldi	r30, 0x52	; 82
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	10 82       	st	Z, r1
	TCCR0 =0;
    252e:	e3 e5       	ldi	r30, 0x53	; 83
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	10 82       	st	Z, r1
	OCR0=0;
    2534:	ec e5       	ldi	r30, 0x5C	; 92
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	10 82       	st	Z, r1
	TIMSK &= ~(1<<OCIE0) & ~(1<<TOIE0);
    253a:	a9 e5       	ldi	r26, 0x59	; 89
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e9 e5       	ldi	r30, 0x59	; 89
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	8c 7f       	andi	r24, 0xFC	; 252
    2546:	8c 93       	st	X, r24


}
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	00 d0       	rcall	.+0      	; 0x2554 <UART_init+0x6>
    2554:	00 d0       	rcall	.+0      	; 0x2556 <UART_init+0x8>
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	9c 83       	std	Y+4, r25	; 0x04
    255c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    255e:	1a 82       	std	Y+2, r1	; 0x02
    2560:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2562:	eb e2       	ldi	r30, 0x2B	; 43
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	82 e0       	ldi	r24, 0x02	; 2
    2568:	80 83       	st	Z, r24
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	
	UCSRB = (1<<RXEN) | (1<<TXEN);
    256a:	ea e2       	ldi	r30, 0x2A	; 42
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	88 e1       	ldi	r24, 0x18	; 24
    2570:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr->parity<<UPM0) | (Config_Ptr->stop<<USBS)  | ((Config_Ptr->bits)<<UCSZ0);
    2572:	a0 e4       	ldi	r26, 0x40	; 64
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	eb 81       	ldd	r30, Y+3	; 0x03
    2578:	fc 81       	ldd	r31, Y+4	; 0x04
    257a:	81 81       	ldd	r24, Z+1	; 0x01
    257c:	88 2f       	mov	r24, r24
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	82 95       	swap	r24
    2582:	92 95       	swap	r25
    2584:	90 7f       	andi	r25, 0xF0	; 240
    2586:	98 27       	eor	r25, r24
    2588:	80 7f       	andi	r24, 0xF0	; 240
    258a:	98 27       	eor	r25, r24
    258c:	28 2f       	mov	r18, r24
    258e:	20 68       	ori	r18, 0x80	; 128
    2590:	eb 81       	ldd	r30, Y+3	; 0x03
    2592:	fc 81       	ldd	r31, Y+4	; 0x04
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	88 2f       	mov	r24, r24
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	28 2b       	or	r18, r24
    25a8:	eb 81       	ldd	r30, Y+3	; 0x03
    25aa:	fc 81       	ldd	r31, Y+4	; 0x04
    25ac:	80 81       	ld	r24, Z
    25ae:	88 2f       	mov	r24, r24
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	82 2b       	or	r24, r18
    25b8:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    25ba:	eb 81       	ldd	r30, Y+3	; 0x03
    25bc:	fc 81       	ldd	r31, Y+4	; 0x04
    25be:	83 81       	ldd	r24, Z+3	; 0x03
    25c0:	94 81       	ldd	r25, Z+4	; 0x04
    25c2:	a5 81       	ldd	r26, Z+5	; 0x05
    25c4:	b6 81       	ldd	r27, Z+6	; 0x06
    25c6:	88 0f       	add	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	aa 1f       	adc	r26, r26
    25cc:	bb 1f       	adc	r27, r27
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	aa 1f       	adc	r26, r26
    25d4:	bb 1f       	adc	r27, r27
    25d6:	88 0f       	add	r24, r24
    25d8:	99 1f       	adc	r25, r25
    25da:	aa 1f       	adc	r26, r26
    25dc:	bb 1f       	adc	r27, r27
    25de:	9c 01       	movw	r18, r24
    25e0:	ad 01       	movw	r20, r26
    25e2:	80 e4       	ldi	r24, 0x40	; 64
    25e4:	92 e4       	ldi	r25, 0x42	; 66
    25e6:	af e0       	ldi	r26, 0x0F	; 15
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	bc 01       	movw	r22, r24
    25ec:	cd 01       	movw	r24, r26
    25ee:	0e 94 a2 13 	call	0x2744	; 0x2744 <__udivmodsi4>
    25f2:	da 01       	movw	r26, r20
    25f4:	c9 01       	movw	r24, r18
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    25fc:	e0 e4       	ldi	r30, 0x40	; 64
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	89 2f       	mov	r24, r25
    2606:	99 27       	eor	r25, r25
    2608:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    260a:	e9 e2       	ldi	r30, 0x29	; 41
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	80 83       	st	Z, r24
}
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	0f 92       	push	r0
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    262c:	eb e2       	ldi	r30, 0x2B	; 43
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	88 2f       	mov	r24, r24
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	80 72       	andi	r24, 0x20	; 32
    2638:	90 70       	andi	r25, 0x00	; 0
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	b9 f3       	breq	.-18     	; 0x262c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    263e:	ec e2       	ldi	r30, 0x2C	; 44
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2656:	eb e2       	ldi	r30, 0x2B	; 43
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	88 23       	and	r24, r24
    265e:	dc f7       	brge	.-10     	; 0x2656 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2660:	ec e2       	ldi	r30, 0x2C	; 44
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
}
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	00 d0       	rcall	.+0      	; 0x2672 <UART_sendString+0x6>
    2672:	0f 92       	push	r0
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	9b 83       	std	Y+3, r25	; 0x03
    267a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    267c:	19 82       	std	Y+1, r1	; 0x01
    267e:	0e c0       	rjmp	.+28     	; 0x269c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	9b 81       	ldd	r25, Y+3	; 0x03
    268a:	fc 01       	movw	r30, r24
    268c:	e2 0f       	add	r30, r18
    268e:	f3 1f       	adc	r31, r19
    2690:	80 81       	ld	r24, Z
    2692:	0e 94 10 13 	call	0x2620	; 0x2620 <UART_sendByte>
		i++;
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	8f 5f       	subi	r24, 0xFF	; 255
    269a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	9b 81       	ldd	r25, Y+3	; 0x03
    26a6:	fc 01       	movw	r30, r24
    26a8:	e2 0f       	add	r30, r18
    26aa:	f3 1f       	adc	r31, r19
    26ac:	80 81       	ld	r24, Z
    26ae:	88 23       	and	r24, r24
    26b0:	39 f7       	brne	.-50     	; 0x2680 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    26be:	0f 93       	push	r16
    26c0:	1f 93       	push	r17
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <UART_receiveString+0xa>
    26c8:	0f 92       	push	r0
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	9b 83       	std	Y+3, r25	; 0x03
    26d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26d2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	28 2f       	mov	r18, r24
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	9b 81       	ldd	r25, Y+3	; 0x03
    26de:	8c 01       	movw	r16, r24
    26e0:	02 0f       	add	r16, r18
    26e2:	13 1f       	adc	r17, r19
    26e4:	0e 94 27 13 	call	0x264e	; 0x264e <UART_recieveByte>
    26e8:	f8 01       	movw	r30, r16
    26ea:	80 83       	st	Z, r24
    26ec:	0f c0       	rjmp	.+30     	; 0x270c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	9b 81       	ldd	r25, Y+3	; 0x03
    26fe:	8c 01       	movw	r16, r24
    2700:	02 0f       	add	r16, r18
    2702:	13 1f       	adc	r17, r19
    2704:	0e 94 27 13 	call	0x264e	; 0x264e <UART_recieveByte>
    2708:	f8 01       	movw	r30, r16
    270a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	9b 81       	ldd	r25, Y+3	; 0x03
    2716:	fc 01       	movw	r30, r24
    2718:	e2 0f       	add	r30, r18
    271a:	f3 1f       	adc	r31, r19
    271c:	80 81       	ld	r24, Z
    271e:	83 32       	cpi	r24, 0x23	; 35
    2720:	31 f7       	brne	.-52     	; 0x26ee <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	9b 81       	ldd	r25, Y+3	; 0x03
    272c:	fc 01       	movw	r30, r24
    272e:	e2 0f       	add	r30, r18
    2730:	f3 1f       	adc	r31, r19
    2732:	10 82       	st	Z, r1
}
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	1f 91       	pop	r17
    2740:	0f 91       	pop	r16
    2742:	08 95       	ret

00002744 <__udivmodsi4>:
    2744:	a1 e2       	ldi	r26, 0x21	; 33
    2746:	1a 2e       	mov	r1, r26
    2748:	aa 1b       	sub	r26, r26
    274a:	bb 1b       	sub	r27, r27
    274c:	fd 01       	movw	r30, r26
    274e:	0d c0       	rjmp	.+26     	; 0x276a <__udivmodsi4_ep>

00002750 <__udivmodsi4_loop>:
    2750:	aa 1f       	adc	r26, r26
    2752:	bb 1f       	adc	r27, r27
    2754:	ee 1f       	adc	r30, r30
    2756:	ff 1f       	adc	r31, r31
    2758:	a2 17       	cp	r26, r18
    275a:	b3 07       	cpc	r27, r19
    275c:	e4 07       	cpc	r30, r20
    275e:	f5 07       	cpc	r31, r21
    2760:	20 f0       	brcs	.+8      	; 0x276a <__udivmodsi4_ep>
    2762:	a2 1b       	sub	r26, r18
    2764:	b3 0b       	sbc	r27, r19
    2766:	e4 0b       	sbc	r30, r20
    2768:	f5 0b       	sbc	r31, r21

0000276a <__udivmodsi4_ep>:
    276a:	66 1f       	adc	r22, r22
    276c:	77 1f       	adc	r23, r23
    276e:	88 1f       	adc	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	1a 94       	dec	r1
    2774:	69 f7       	brne	.-38     	; 0x2750 <__udivmodsi4_loop>
    2776:	60 95       	com	r22
    2778:	70 95       	com	r23
    277a:	80 95       	com	r24
    277c:	90 95       	com	r25
    277e:	9b 01       	movw	r18, r22
    2780:	ac 01       	movw	r20, r24
    2782:	bd 01       	movw	r22, r26
    2784:	cf 01       	movw	r24, r30
    2786:	08 95       	ret

00002788 <__prologue_saves__>:
    2788:	2f 92       	push	r2
    278a:	3f 92       	push	r3
    278c:	4f 92       	push	r4
    278e:	5f 92       	push	r5
    2790:	6f 92       	push	r6
    2792:	7f 92       	push	r7
    2794:	8f 92       	push	r8
    2796:	9f 92       	push	r9
    2798:	af 92       	push	r10
    279a:	bf 92       	push	r11
    279c:	cf 92       	push	r12
    279e:	df 92       	push	r13
    27a0:	ef 92       	push	r14
    27a2:	ff 92       	push	r15
    27a4:	0f 93       	push	r16
    27a6:	1f 93       	push	r17
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	ca 1b       	sub	r28, r26
    27b2:	db 0b       	sbc	r29, r27
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	09 94       	ijmp

000027c0 <__epilogue_restores__>:
    27c0:	2a 88       	ldd	r2, Y+18	; 0x12
    27c2:	39 88       	ldd	r3, Y+17	; 0x11
    27c4:	48 88       	ldd	r4, Y+16	; 0x10
    27c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    27c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    27ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    27cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    27d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    27d2:	b9 84       	ldd	r11, Y+9	; 0x09
    27d4:	c8 84       	ldd	r12, Y+8	; 0x08
    27d6:	df 80       	ldd	r13, Y+7	; 0x07
    27d8:	ee 80       	ldd	r14, Y+6	; 0x06
    27da:	fd 80       	ldd	r15, Y+5	; 0x05
    27dc:	0c 81       	ldd	r16, Y+4	; 0x04
    27de:	1b 81       	ldd	r17, Y+3	; 0x03
    27e0:	aa 81       	ldd	r26, Y+2	; 0x02
    27e2:	b9 81       	ldd	r27, Y+1	; 0x01
    27e4:	ce 0f       	add	r28, r30
    27e6:	d1 1d       	adc	r29, r1
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	ed 01       	movw	r28, r26
    27f4:	08 95       	ret

000027f6 <itoa>:
    27f6:	fb 01       	movw	r30, r22
    27f8:	9f 01       	movw	r18, r30
    27fa:	e8 94       	clt
    27fc:	42 30       	cpi	r20, 0x02	; 2
    27fe:	c4 f0       	brlt	.+48     	; 0x2830 <itoa+0x3a>
    2800:	45 32       	cpi	r20, 0x25	; 37
    2802:	b4 f4       	brge	.+44     	; 0x2830 <itoa+0x3a>
    2804:	4a 30       	cpi	r20, 0x0A	; 10
    2806:	29 f4       	brne	.+10     	; 0x2812 <itoa+0x1c>
    2808:	97 fb       	bst	r25, 7
    280a:	1e f4       	brtc	.+6      	; 0x2812 <itoa+0x1c>
    280c:	90 95       	com	r25
    280e:	81 95       	neg	r24
    2810:	9f 4f       	sbci	r25, 0xFF	; 255
    2812:	64 2f       	mov	r22, r20
    2814:	77 27       	eor	r23, r23
    2816:	0e 94 2c 14 	call	0x2858	; 0x2858 <__udivmodhi4>
    281a:	80 5d       	subi	r24, 0xD0	; 208
    281c:	8a 33       	cpi	r24, 0x3A	; 58
    281e:	0c f0       	brlt	.+2      	; 0x2822 <itoa+0x2c>
    2820:	89 5d       	subi	r24, 0xD9	; 217
    2822:	81 93       	st	Z+, r24
    2824:	cb 01       	movw	r24, r22
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	a1 f7       	brne	.-24     	; 0x2812 <itoa+0x1c>
    282a:	16 f4       	brtc	.+4      	; 0x2830 <itoa+0x3a>
    282c:	5d e2       	ldi	r21, 0x2D	; 45
    282e:	51 93       	st	Z+, r21
    2830:	10 82       	st	Z, r1
    2832:	c9 01       	movw	r24, r18
    2834:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <strrev>

00002838 <strrev>:
    2838:	dc 01       	movw	r26, r24
    283a:	fc 01       	movw	r30, r24
    283c:	67 2f       	mov	r22, r23
    283e:	71 91       	ld	r23, Z+
    2840:	77 23       	and	r23, r23
    2842:	e1 f7       	brne	.-8      	; 0x283c <strrev+0x4>
    2844:	32 97       	sbiw	r30, 0x02	; 2
    2846:	04 c0       	rjmp	.+8      	; 0x2850 <strrev+0x18>
    2848:	7c 91       	ld	r23, X
    284a:	6d 93       	st	X+, r22
    284c:	70 83       	st	Z, r23
    284e:	62 91       	ld	r22, -Z
    2850:	ae 17       	cp	r26, r30
    2852:	bf 07       	cpc	r27, r31
    2854:	c8 f3       	brcs	.-14     	; 0x2848 <strrev+0x10>
    2856:	08 95       	ret

00002858 <__udivmodhi4>:
    2858:	aa 1b       	sub	r26, r26
    285a:	bb 1b       	sub	r27, r27
    285c:	51 e1       	ldi	r21, 0x11	; 17
    285e:	07 c0       	rjmp	.+14     	; 0x286e <__udivmodhi4_ep>

00002860 <__udivmodhi4_loop>:
    2860:	aa 1f       	adc	r26, r26
    2862:	bb 1f       	adc	r27, r27
    2864:	a6 17       	cp	r26, r22
    2866:	b7 07       	cpc	r27, r23
    2868:	10 f0       	brcs	.+4      	; 0x286e <__udivmodhi4_ep>
    286a:	a6 1b       	sub	r26, r22
    286c:	b7 0b       	sbc	r27, r23

0000286e <__udivmodhi4_ep>:
    286e:	88 1f       	adc	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	5a 95       	dec	r21
    2874:	a9 f7       	brne	.-22     	; 0x2860 <__udivmodhi4_loop>
    2876:	80 95       	com	r24
    2878:	90 95       	com	r25
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	08 95       	ret

00002880 <_exit>:
    2880:	f8 94       	cli

00002882 <__stop_program>:
    2882:	ff cf       	rjmp	.-2      	; 0x2882 <__stop_program>
